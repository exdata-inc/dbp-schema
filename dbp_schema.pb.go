// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.12.4
// source: dbp_schema.proto

package dbp_schema

import (
	_struct "github.com/golang/protobuf/ptypes/struct"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ConversionCharacteristicEnumeration int32

const (
	// option allow_alias = true;
	ConversionCharacteristicEnumeration_SINGLE_VALUE_REPLACE ConversionCharacteristicEnumeration = 0
	ConversionCharacteristicEnumeration_COL_MERGE            ConversionCharacteristicEnumeration = 1
	ConversionCharacteristicEnumeration_ROW_MERGE            ConversionCharacteristicEnumeration = 2
)

// Enum value maps for ConversionCharacteristicEnumeration.
var (
	ConversionCharacteristicEnumeration_name = map[int32]string{
		0: "SINGLE_VALUE_REPLACE",
		1: "COL_MERGE",
		2: "ROW_MERGE",
	}
	ConversionCharacteristicEnumeration_value = map[string]int32{
		"SINGLE_VALUE_REPLACE": 0,
		"COL_MERGE":            1,
		"ROW_MERGE":            2,
	}
)

func (x ConversionCharacteristicEnumeration) Enum() *ConversionCharacteristicEnumeration {
	p := new(ConversionCharacteristicEnumeration)
	*p = x
	return p
}

func (x ConversionCharacteristicEnumeration) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConversionCharacteristicEnumeration) Descriptor() protoreflect.EnumDescriptor {
	return file_dbp_schema_proto_enumTypes[0].Descriptor()
}

func (ConversionCharacteristicEnumeration) Type() protoreflect.EnumType {
	return &file_dbp_schema_proto_enumTypes[0]
}

func (x ConversionCharacteristicEnumeration) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConversionCharacteristicEnumeration.Descriptor instead.
func (ConversionCharacteristicEnumeration) EnumDescriptor() ([]byte, []int) {
	return file_dbp_schema_proto_rawDescGZIP(), []int{0}
}

type VariableCharacteristicEnumeration int32

const (
	// option allow_alias = true;
	VariableCharacteristicEnumeration_QUALITATIVE  VariableCharacteristicEnumeration = 0
	VariableCharacteristicEnumeration_QUANTITATIVE VariableCharacteristicEnumeration = 1
)

// Enum value maps for VariableCharacteristicEnumeration.
var (
	VariableCharacteristicEnumeration_name = map[int32]string{
		0: "QUALITATIVE",
		1: "QUANTITATIVE",
	}
	VariableCharacteristicEnumeration_value = map[string]int32{
		"QUALITATIVE":  0,
		"QUANTITATIVE": 1,
	}
)

func (x VariableCharacteristicEnumeration) Enum() *VariableCharacteristicEnumeration {
	p := new(VariableCharacteristicEnumeration)
	*p = x
	return p
}

func (x VariableCharacteristicEnumeration) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VariableCharacteristicEnumeration) Descriptor() protoreflect.EnumDescriptor {
	return file_dbp_schema_proto_enumTypes[1].Descriptor()
}

func (VariableCharacteristicEnumeration) Type() protoreflect.EnumType {
	return &file_dbp_schema_proto_enumTypes[1]
}

func (x VariableCharacteristicEnumeration) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VariableCharacteristicEnumeration.Descriptor instead.
func (VariableCharacteristicEnumeration) EnumDescriptor() ([]byte, []int) {
	return file_dbp_schema_proto_rawDescGZIP(), []int{1}
}

type RealWorldDataset struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              *string                         `protobuf:"bytes,1,opt,name=id,proto3,oneof" json:"id,omitempty"`                            // 自身(このJSON-LD)のURL
	Name            *string                         `protobuf:"bytes,2,opt,name=name,proto3,oneof" json:"name,omitempty"`                        // (人間が見てわかりやすい)データセットの名前
	Url             *string                         `protobuf:"bytes,3,opt,name=url,proto3,oneof" json:"url,omitempty"`                          // (未使用)
	StructureInfo   *RealWorldDataStructureInfo     `protobuf:"bytes,4,opt,name=structureInfo,proto3,oneof" json:"structureInfo,omitempty"`      // 構造情報
	GeneratedFrom   []*RealWorldDataset             `protobuf:"bytes,5,rep,name=generatedFrom,proto3" json:"generatedFrom,omitempty"`            // このデータセットの基になったデータセット(醸造時の入力データセット)
	GeneratedUsing  *RealWorldDataBrewerInfo        `protobuf:"bytes,6,opt,name=generatedUsing,proto3,oneof" json:"generatedUsing,omitempty"`    // このデータセットを作った醸造プログラム
	GeneratedArgs   []*RealWorldDataBrewingArgument `protobuf:"bytes,7,rep,name=generatedArgs,proto3" json:"generatedArgs,omitempty"`            // このデータセットを作った際のパラメータ(醸造時の入力パラメータ)
	CollectionInfo  *RealWorldDataCollectionInfo    `protobuf:"bytes,8,opt,name=collectionInfo,proto3,oneof" json:"collectionInfo,omitempty"`    // 収集情報
	Distribution    []*RealWorldDataStoringInfo     `protobuf:"bytes,9,rep,name=distribution,proto3" json:"distribution,omitempty"`              // データの保存先（データの記録期間に応じて、複数の場所に置く場合もあるため repeated）
	Author          *string                         `protobuf:"bytes,10,opt,name=author,proto3,oneof" json:"author,omitempty"`                   // データを集めている主体
	ContentLocation *string                         `protobuf:"bytes,11,opt,name=contentLocation,proto3,oneof" json:"contentLocation,omitempty"` // データを集めている場所
	DateCreated     *timestamp.Timestamp            `protobuf:"bytes,12,opt,name=dateCreated,proto3,oneof" json:"dateCreated,omitempty"`         // データを集め始めた日時
	DateModified    *timestamp.Timestamp            `protobuf:"bytes,13,opt,name=dateModified,proto3,oneof" json:"dateModified,omitempty"`       // 最新のデータを集め始めた日時
	DatePublished   *timestamp.Timestamp            `protobuf:"bytes,14,opt,name=datePublished,proto3,oneof" json:"datePublished,omitempty"`
	License         *string                         `protobuf:"bytes,15,opt,name=license,proto3,oneof" json:"license,omitempty"`
	LocationCreated *string                         `protobuf:"bytes,16,opt,name=locationCreated,proto3,oneof" json:"locationCreated,omitempty"`
	Description     *string                         `protobuf:"bytes,17,opt,name=description,proto3,oneof" json:"description,omitempty"`
}

func (x *RealWorldDataset) Reset() {
	*x = RealWorldDataset{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dbp_schema_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RealWorldDataset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RealWorldDataset) ProtoMessage() {}

func (x *RealWorldDataset) ProtoReflect() protoreflect.Message {
	mi := &file_dbp_schema_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RealWorldDataset.ProtoReflect.Descriptor instead.
func (*RealWorldDataset) Descriptor() ([]byte, []int) {
	return file_dbp_schema_proto_rawDescGZIP(), []int{0}
}

func (x *RealWorldDataset) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *RealWorldDataset) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *RealWorldDataset) GetUrl() string {
	if x != nil && x.Url != nil {
		return *x.Url
	}
	return ""
}

func (x *RealWorldDataset) GetStructureInfo() *RealWorldDataStructureInfo {
	if x != nil {
		return x.StructureInfo
	}
	return nil
}

func (x *RealWorldDataset) GetGeneratedFrom() []*RealWorldDataset {
	if x != nil {
		return x.GeneratedFrom
	}
	return nil
}

func (x *RealWorldDataset) GetGeneratedUsing() *RealWorldDataBrewerInfo {
	if x != nil {
		return x.GeneratedUsing
	}
	return nil
}

func (x *RealWorldDataset) GetGeneratedArgs() []*RealWorldDataBrewingArgument {
	if x != nil {
		return x.GeneratedArgs
	}
	return nil
}

func (x *RealWorldDataset) GetCollectionInfo() *RealWorldDataCollectionInfo {
	if x != nil {
		return x.CollectionInfo
	}
	return nil
}

func (x *RealWorldDataset) GetDistribution() []*RealWorldDataStoringInfo {
	if x != nil {
		return x.Distribution
	}
	return nil
}

func (x *RealWorldDataset) GetAuthor() string {
	if x != nil && x.Author != nil {
		return *x.Author
	}
	return ""
}

func (x *RealWorldDataset) GetContentLocation() string {
	if x != nil && x.ContentLocation != nil {
		return *x.ContentLocation
	}
	return ""
}

func (x *RealWorldDataset) GetDateCreated() *timestamp.Timestamp {
	if x != nil {
		return x.DateCreated
	}
	return nil
}

func (x *RealWorldDataset) GetDateModified() *timestamp.Timestamp {
	if x != nil {
		return x.DateModified
	}
	return nil
}

func (x *RealWorldDataset) GetDatePublished() *timestamp.Timestamp {
	if x != nil {
		return x.DatePublished
	}
	return nil
}

func (x *RealWorldDataset) GetLicense() string {
	if x != nil && x.License != nil {
		return *x.License
	}
	return ""
}

func (x *RealWorldDataset) GetLocationCreated() string {
	if x != nil && x.LocationCreated != nil {
		return *x.LocationCreated
	}
	return ""
}

func (x *RealWorldDataset) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

type RealWorldDataBrewerInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                  *string                            `protobuf:"bytes,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
	Name                *string                            `protobuf:"bytes,2,opt,name=name,proto3,oneof" json:"name,omitempty"`
	Url                 *string                            `protobuf:"bytes,3,opt,name=url,proto3,oneof" json:"url,omitempty"`
	Key                 *string                            `protobuf:"bytes,4,opt,name=key,proto3,oneof" json:"key,omitempty"`
	InputType           *string                            `protobuf:"bytes,5,opt,name=inputType,proto3,oneof" json:"inputType,omitempty"`
	Value               []byte                             `protobuf:"bytes,6,opt,name=value,proto3,oneof" json:"value,omitempty"`
	InputCharacteristic *VariableCharacteristicEnumeration `protobuf:"varint,7,opt,name=inputCharacteristic,proto3,enum=dbp_schema.VariableCharacteristicEnumeration,oneof" json:"inputCharacteristic,omitempty"`
}

func (x *RealWorldDataBrewerInput) Reset() {
	*x = RealWorldDataBrewerInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dbp_schema_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RealWorldDataBrewerInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RealWorldDataBrewerInput) ProtoMessage() {}

func (x *RealWorldDataBrewerInput) ProtoReflect() protoreflect.Message {
	mi := &file_dbp_schema_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RealWorldDataBrewerInput.ProtoReflect.Descriptor instead.
func (*RealWorldDataBrewerInput) Descriptor() ([]byte, []int) {
	return file_dbp_schema_proto_rawDescGZIP(), []int{1}
}

func (x *RealWorldDataBrewerInput) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *RealWorldDataBrewerInput) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *RealWorldDataBrewerInput) GetUrl() string {
	if x != nil && x.Url != nil {
		return *x.Url
	}
	return ""
}

func (x *RealWorldDataBrewerInput) GetKey() string {
	if x != nil && x.Key != nil {
		return *x.Key
	}
	return ""
}

func (x *RealWorldDataBrewerInput) GetInputType() string {
	if x != nil && x.InputType != nil {
		return *x.InputType
	}
	return ""
}

func (x *RealWorldDataBrewerInput) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *RealWorldDataBrewerInput) GetInputCharacteristic() VariableCharacteristicEnumeration {
	if x != nil && x.InputCharacteristic != nil {
		return *x.InputCharacteristic
	}
	return VariableCharacteristicEnumeration_QUALITATIVE
}

type RealWorldDataBrewerOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                   *string                            `protobuf:"bytes,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
	Name                 *string                            `protobuf:"bytes,2,opt,name=name,proto3,oneof" json:"name,omitempty"`
	Url                  *string                            `protobuf:"bytes,3,opt,name=url,proto3,oneof" json:"url,omitempty"`
	Key                  *string                            `protobuf:"bytes,4,opt,name=key,proto3,oneof" json:"key,omitempty"`
	OutputType           *string                            `protobuf:"bytes,5,opt,name=outputType,proto3,oneof" json:"outputType,omitempty"`
	Value                []byte                             `protobuf:"bytes,6,opt,name=value,proto3,oneof" json:"value,omitempty"`
	OutputCharacteristic *VariableCharacteristicEnumeration `protobuf:"varint,7,opt,name=outputCharacteristic,proto3,enum=dbp_schema.VariableCharacteristicEnumeration,oneof" json:"outputCharacteristic,omitempty"`
}

func (x *RealWorldDataBrewerOutput) Reset() {
	*x = RealWorldDataBrewerOutput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dbp_schema_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RealWorldDataBrewerOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RealWorldDataBrewerOutput) ProtoMessage() {}

func (x *RealWorldDataBrewerOutput) ProtoReflect() protoreflect.Message {
	mi := &file_dbp_schema_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RealWorldDataBrewerOutput.ProtoReflect.Descriptor instead.
func (*RealWorldDataBrewerOutput) Descriptor() ([]byte, []int) {
	return file_dbp_schema_proto_rawDescGZIP(), []int{2}
}

func (x *RealWorldDataBrewerOutput) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *RealWorldDataBrewerOutput) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *RealWorldDataBrewerOutput) GetUrl() string {
	if x != nil && x.Url != nil {
		return *x.Url
	}
	return ""
}

func (x *RealWorldDataBrewerOutput) GetKey() string {
	if x != nil && x.Key != nil {
		return *x.Key
	}
	return ""
}

func (x *RealWorldDataBrewerOutput) GetOutputType() string {
	if x != nil && x.OutputType != nil {
		return *x.OutputType
	}
	return ""
}

func (x *RealWorldDataBrewerOutput) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *RealWorldDataBrewerOutput) GetOutputCharacteristic() VariableCharacteristicEnumeration {
	if x != nil && x.OutputCharacteristic != nil {
		return *x.OutputCharacteristic
	}
	return VariableCharacteristicEnumeration_QUALITATIVE
}

type RealWorldDataBrewingArgument struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           *string `protobuf:"bytes,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
	Name         *string `protobuf:"bytes,2,opt,name=name,proto3,oneof" json:"name,omitempty"`
	Url          *string `protobuf:"bytes,3,opt,name=url,proto3,oneof" json:"url,omitempty"`
	Key          *string `protobuf:"bytes,4,opt,name=key,proto3,oneof" json:"key,omitempty"`
	ArgumentType *string `protobuf:"bytes,5,opt,name=argumentType,proto3,oneof" json:"argumentType,omitempty"`
	Value        []byte  `protobuf:"bytes,6,opt,name=value,proto3,oneof" json:"value,omitempty"`
}

func (x *RealWorldDataBrewingArgument) Reset() {
	*x = RealWorldDataBrewingArgument{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dbp_schema_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RealWorldDataBrewingArgument) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RealWorldDataBrewingArgument) ProtoMessage() {}

func (x *RealWorldDataBrewingArgument) ProtoReflect() protoreflect.Message {
	mi := &file_dbp_schema_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RealWorldDataBrewingArgument.ProtoReflect.Descriptor instead.
func (*RealWorldDataBrewingArgument) Descriptor() ([]byte, []int) {
	return file_dbp_schema_proto_rawDescGZIP(), []int{3}
}

func (x *RealWorldDataBrewingArgument) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *RealWorldDataBrewingArgument) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *RealWorldDataBrewingArgument) GetUrl() string {
	if x != nil && x.Url != nil {
		return *x.Url
	}
	return ""
}

func (x *RealWorldDataBrewingArgument) GetKey() string {
	if x != nil && x.Key != nil {
		return *x.Key
	}
	return ""
}

func (x *RealWorldDataBrewingArgument) GetArgumentType() string {
	if x != nil && x.ArgumentType != nil {
		return *x.ArgumentType
	}
	return ""
}

func (x *RealWorldDataBrewingArgument) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

type RealWorldDataBrewerInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                       *string                              `protobuf:"bytes,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
	Name                     *string                              `protobuf:"bytes,2,opt,name=name,proto3,oneof" json:"name,omitempty"`
	Url                      *string                              `protobuf:"bytes,3,opt,name=url,proto3,oneof" json:"url,omitempty"`
	InputSpecs               []*RealWorldDataBrewerInput          `protobuf:"bytes,4,rep,name=inputSpecs,proto3" json:"inputSpecs,omitempty"`
	OutputSpecs              []*RealWorldDataBrewerOutput         `protobuf:"bytes,5,rep,name=outputSpecs,proto3" json:"outputSpecs,omitempty"`
	ArgSpecs                 []*RealWorldDataBrewingArgument      `protobuf:"bytes,6,rep,name=argSpecs,proto3" json:"argSpecs,omitempty"`
	ConversionCharacteristic *ConversionCharacteristicEnumeration `protobuf:"varint,7,opt,name=conversionCharacteristic,proto3,enum=dbp_schema.ConversionCharacteristicEnumeration,oneof" json:"conversionCharacteristic,omitempty"`
}

func (x *RealWorldDataBrewerInfo) Reset() {
	*x = RealWorldDataBrewerInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dbp_schema_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RealWorldDataBrewerInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RealWorldDataBrewerInfo) ProtoMessage() {}

func (x *RealWorldDataBrewerInfo) ProtoReflect() protoreflect.Message {
	mi := &file_dbp_schema_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RealWorldDataBrewerInfo.ProtoReflect.Descriptor instead.
func (*RealWorldDataBrewerInfo) Descriptor() ([]byte, []int) {
	return file_dbp_schema_proto_rawDescGZIP(), []int{4}
}

func (x *RealWorldDataBrewerInfo) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *RealWorldDataBrewerInfo) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *RealWorldDataBrewerInfo) GetUrl() string {
	if x != nil && x.Url != nil {
		return *x.Url
	}
	return ""
}

func (x *RealWorldDataBrewerInfo) GetInputSpecs() []*RealWorldDataBrewerInput {
	if x != nil {
		return x.InputSpecs
	}
	return nil
}

func (x *RealWorldDataBrewerInfo) GetOutputSpecs() []*RealWorldDataBrewerOutput {
	if x != nil {
		return x.OutputSpecs
	}
	return nil
}

func (x *RealWorldDataBrewerInfo) GetArgSpecs() []*RealWorldDataBrewingArgument {
	if x != nil {
		return x.ArgSpecs
	}
	return nil
}

func (x *RealWorldDataBrewerInfo) GetConversionCharacteristic() ConversionCharacteristicEnumeration {
	if x != nil && x.ConversionCharacteristic != nil {
		return *x.ConversionCharacteristic
	}
	return ConversionCharacteristicEnumeration_SINGLE_VALUE_REPLACE
}

type RealWorldDataCollectionInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                 *string     `protobuf:"bytes,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
	Name               *string     `protobuf:"bytes,2,opt,name=name,proto3,oneof" json:"name,omitempty"`
	Url                *string     `protobuf:"bytes,3,opt,name=url,proto3,oneof" json:"url,omitempty"`
	CollectionStyle    *string     `protobuf:"bytes,4,opt,name=collectionStyle,proto3,oneof" json:"collectionStyle,omitempty"`
	CollectionProtocol *string     `protobuf:"bytes,5,opt,name=collectionProtocol,proto3,oneof" json:"collectionProtocol,omitempty"`
	ListenAddress      *string     `protobuf:"bytes,6,opt,name=listenAddress,proto3,oneof" json:"listenAddress,omitempty"`
	ServerAddress      *string     `protobuf:"bytes,7,opt,name=serverAddress,proto3,oneof" json:"serverAddress,omitempty"`
	EntryPoint         *EntryPoint `protobuf:"bytes,8,opt,name=entryPoint,proto3,oneof" json:"entryPoint,omitempty"`
}

func (x *RealWorldDataCollectionInfo) Reset() {
	*x = RealWorldDataCollectionInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dbp_schema_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RealWorldDataCollectionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RealWorldDataCollectionInfo) ProtoMessage() {}

func (x *RealWorldDataCollectionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_dbp_schema_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RealWorldDataCollectionInfo.ProtoReflect.Descriptor instead.
func (*RealWorldDataCollectionInfo) Descriptor() ([]byte, []int) {
	return file_dbp_schema_proto_rawDescGZIP(), []int{5}
}

func (x *RealWorldDataCollectionInfo) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *RealWorldDataCollectionInfo) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *RealWorldDataCollectionInfo) GetUrl() string {
	if x != nil && x.Url != nil {
		return *x.Url
	}
	return ""
}

func (x *RealWorldDataCollectionInfo) GetCollectionStyle() string {
	if x != nil && x.CollectionStyle != nil {
		return *x.CollectionStyle
	}
	return ""
}

func (x *RealWorldDataCollectionInfo) GetCollectionProtocol() string {
	if x != nil && x.CollectionProtocol != nil {
		return *x.CollectionProtocol
	}
	return ""
}

func (x *RealWorldDataCollectionInfo) GetListenAddress() string {
	if x != nil && x.ListenAddress != nil {
		return *x.ListenAddress
	}
	return ""
}

func (x *RealWorldDataCollectionInfo) GetServerAddress() string {
	if x != nil && x.ServerAddress != nil {
		return *x.ServerAddress
	}
	return ""
}

func (x *RealWorldDataCollectionInfo) GetEntryPoint() *EntryPoint {
	if x != nil {
		return x.EntryPoint
	}
	return nil
}

type EntryPoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActionApplication         *string `protobuf:"bytes,1,opt,name=actionApplication,proto3,oneof" json:"actionApplication,omitempty"`
	ActionPlatform            *string `protobuf:"bytes,2,opt,name=actionPlatform,proto3,oneof" json:"actionPlatform,omitempty"`
	ContentType               *string `protobuf:"bytes,3,opt,name=contentType,proto3,oneof" json:"contentType,omitempty"`
	EncodingType              *string `protobuf:"bytes,4,opt,name=encodingType,proto3,oneof" json:"encodingType,omitempty"`
	HttpMethod                *string `protobuf:"bytes,5,opt,name=httpMethod,proto3,oneof" json:"httpMethod,omitempty"`
	UrlTemplate               *string `protobuf:"bytes,6,opt,name=urlTemplate,proto3,oneof" json:"urlTemplate,omitempty"`
	AdditionalType            *string `protobuf:"bytes,7,opt,name=additionalType,proto3,oneof" json:"additionalType,omitempty"`
	AlternateName             *string `protobuf:"bytes,8,opt,name=alternateName,proto3,oneof" json:"alternateName,omitempty"`
	Description               *string `protobuf:"bytes,9,opt,name=description,proto3,oneof" json:"description,omitempty"`
	DisambiguatingDescription *string `protobuf:"bytes,10,opt,name=disambiguatingDescription,proto3,oneof" json:"disambiguatingDescription,omitempty"`
	Id                        *string `protobuf:"bytes,11,opt,name=id,proto3,oneof" json:"id,omitempty"`
	Image                     *string `protobuf:"bytes,12,opt,name=image,proto3,oneof" json:"image,omitempty"`
	MainEntityOfPage          *string `protobuf:"bytes,13,opt,name=mainEntityOfPage,proto3,oneof" json:"mainEntityOfPage,omitempty"`
	Name                      *string `protobuf:"bytes,14,opt,name=name,proto3,oneof" json:"name,omitempty"`
	PotentialAction           *string `protobuf:"bytes,15,opt,name=potentialAction,proto3,oneof" json:"potentialAction,omitempty"`
	SameAs                    *string `protobuf:"bytes,16,opt,name=sameAs,proto3,oneof" json:"sameAs,omitempty"`
	SubjectOf                 *string `protobuf:"bytes,17,opt,name=subjectOf,proto3,oneof" json:"subjectOf,omitempty"`
	Url                       *string `protobuf:"bytes,18,opt,name=url,proto3,oneof" json:"url,omitempty"`
}

func (x *EntryPoint) Reset() {
	*x = EntryPoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dbp_schema_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EntryPoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntryPoint) ProtoMessage() {}

func (x *EntryPoint) ProtoReflect() protoreflect.Message {
	mi := &file_dbp_schema_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntryPoint.ProtoReflect.Descriptor instead.
func (*EntryPoint) Descriptor() ([]byte, []int) {
	return file_dbp_schema_proto_rawDescGZIP(), []int{6}
}

func (x *EntryPoint) GetActionApplication() string {
	if x != nil && x.ActionApplication != nil {
		return *x.ActionApplication
	}
	return ""
}

func (x *EntryPoint) GetActionPlatform() string {
	if x != nil && x.ActionPlatform != nil {
		return *x.ActionPlatform
	}
	return ""
}

func (x *EntryPoint) GetContentType() string {
	if x != nil && x.ContentType != nil {
		return *x.ContentType
	}
	return ""
}

func (x *EntryPoint) GetEncodingType() string {
	if x != nil && x.EncodingType != nil {
		return *x.EncodingType
	}
	return ""
}

func (x *EntryPoint) GetHttpMethod() string {
	if x != nil && x.HttpMethod != nil {
		return *x.HttpMethod
	}
	return ""
}

func (x *EntryPoint) GetUrlTemplate() string {
	if x != nil && x.UrlTemplate != nil {
		return *x.UrlTemplate
	}
	return ""
}

func (x *EntryPoint) GetAdditionalType() string {
	if x != nil && x.AdditionalType != nil {
		return *x.AdditionalType
	}
	return ""
}

func (x *EntryPoint) GetAlternateName() string {
	if x != nil && x.AlternateName != nil {
		return *x.AlternateName
	}
	return ""
}

func (x *EntryPoint) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *EntryPoint) GetDisambiguatingDescription() string {
	if x != nil && x.DisambiguatingDescription != nil {
		return *x.DisambiguatingDescription
	}
	return ""
}

func (x *EntryPoint) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *EntryPoint) GetImage() string {
	if x != nil && x.Image != nil {
		return *x.Image
	}
	return ""
}

func (x *EntryPoint) GetMainEntityOfPage() string {
	if x != nil && x.MainEntityOfPage != nil {
		return *x.MainEntityOfPage
	}
	return ""
}

func (x *EntryPoint) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *EntryPoint) GetPotentialAction() string {
	if x != nil && x.PotentialAction != nil {
		return *x.PotentialAction
	}
	return ""
}

func (x *EntryPoint) GetSameAs() string {
	if x != nil && x.SameAs != nil {
		return *x.SameAs
	}
	return ""
}

func (x *EntryPoint) GetSubjectOf() string {
	if x != nil && x.SubjectOf != nil {
		return *x.SubjectOf
	}
	return ""
}

func (x *EntryPoint) GetUrl() string {
	if x != nil && x.Url != nil {
		return *x.Url
	}
	return ""
}

type Thing struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AdditionalType            *string `protobuf:"bytes,1,opt,name=additionalType,proto3,oneof" json:"additionalType,omitempty"`
	AlternateName             *string `protobuf:"bytes,2,opt,name=alternateName,proto3,oneof" json:"alternateName,omitempty"`
	Description               *string `protobuf:"bytes,3,opt,name=description,proto3,oneof" json:"description,omitempty"`
	DisambiguatingDescription *string `protobuf:"bytes,4,opt,name=disambiguatingDescription,proto3,oneof" json:"disambiguatingDescription,omitempty"`
	Id                        *string `protobuf:"bytes,5,opt,name=id,proto3,oneof" json:"id,omitempty"`
	Image                     *string `protobuf:"bytes,6,opt,name=image,proto3,oneof" json:"image,omitempty"`
	MainEntityOfPage          *string `protobuf:"bytes,7,opt,name=mainEntityOfPage,proto3,oneof" json:"mainEntityOfPage,omitempty"`
	Name                      *string `protobuf:"bytes,8,opt,name=name,proto3,oneof" json:"name,omitempty"`
	PotentialAction           *string `protobuf:"bytes,9,opt,name=potentialAction,proto3,oneof" json:"potentialAction,omitempty"`
	SameAs                    *string `protobuf:"bytes,10,opt,name=sameAs,proto3,oneof" json:"sameAs,omitempty"`
	SubjectOf                 *string `protobuf:"bytes,11,opt,name=subjectOf,proto3,oneof" json:"subjectOf,omitempty"`
	Url                       *string `protobuf:"bytes,12,opt,name=url,proto3,oneof" json:"url,omitempty"`
}

func (x *Thing) Reset() {
	*x = Thing{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dbp_schema_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Thing) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Thing) ProtoMessage() {}

func (x *Thing) ProtoReflect() protoreflect.Message {
	mi := &file_dbp_schema_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Thing.ProtoReflect.Descriptor instead.
func (*Thing) Descriptor() ([]byte, []int) {
	return file_dbp_schema_proto_rawDescGZIP(), []int{7}
}

func (x *Thing) GetAdditionalType() string {
	if x != nil && x.AdditionalType != nil {
		return *x.AdditionalType
	}
	return ""
}

func (x *Thing) GetAlternateName() string {
	if x != nil && x.AlternateName != nil {
		return *x.AlternateName
	}
	return ""
}

func (x *Thing) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *Thing) GetDisambiguatingDescription() string {
	if x != nil && x.DisambiguatingDescription != nil {
		return *x.DisambiguatingDescription
	}
	return ""
}

func (x *Thing) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *Thing) GetImage() string {
	if x != nil && x.Image != nil {
		return *x.Image
	}
	return ""
}

func (x *Thing) GetMainEntityOfPage() string {
	if x != nil && x.MainEntityOfPage != nil {
		return *x.MainEntityOfPage
	}
	return ""
}

func (x *Thing) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *Thing) GetPotentialAction() string {
	if x != nil && x.PotentialAction != nil {
		return *x.PotentialAction
	}
	return ""
}

func (x *Thing) GetSameAs() string {
	if x != nil && x.SameAs != nil {
		return *x.SameAs
	}
	return ""
}

func (x *Thing) GetSubjectOf() string {
	if x != nil && x.SubjectOf != nil {
		return *x.SubjectOf
	}
	return ""
}

func (x *Thing) GetUrl() string {
	if x != nil && x.Url != nil {
		return *x.Url
	}
	return ""
}

type RealWorldDataBrewEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RealWorldDataBrewEvent) Reset() {
	*x = RealWorldDataBrewEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dbp_schema_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RealWorldDataBrewEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RealWorldDataBrewEvent) ProtoMessage() {}

func (x *RealWorldDataBrewEvent) ProtoReflect() protoreflect.Message {
	mi := &file_dbp_schema_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RealWorldDataBrewEvent.ProtoReflect.Descriptor instead.
func (*RealWorldDataBrewEvent) Descriptor() ([]byte, []int) {
	return file_dbp_schema_proto_rawDescGZIP(), []int{8}
}

type RealWorldDataStructureInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             *string         `protobuf:"bytes,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
	Name           *string         `protobuf:"bytes,2,opt,name=name,proto3,oneof" json:"name,omitempty"`
	Url            *string         `protobuf:"bytes,3,opt,name=url,proto3,oneof" json:"url,omitempty"`
	EncodingFormat *string         `protobuf:"bytes,4,opt,name=encodingFormat,proto3,oneof" json:"encodingFormat,omitempty"`
	Structure      *_struct.Struct `protobuf:"bytes,5,opt,name=structure,proto3,oneof" json:"structure,omitempty"` // JSON-LD schema ( including @graph )
	GraphqlSchema  *string         `protobuf:"bytes,6,opt,name=graphqlSchema,proto3,oneof" json:"graphqlSchema,omitempty"`
}

func (x *RealWorldDataStructureInfo) Reset() {
	*x = RealWorldDataStructureInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dbp_schema_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RealWorldDataStructureInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RealWorldDataStructureInfo) ProtoMessage() {}

func (x *RealWorldDataStructureInfo) ProtoReflect() protoreflect.Message {
	mi := &file_dbp_schema_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RealWorldDataStructureInfo.ProtoReflect.Descriptor instead.
func (*RealWorldDataStructureInfo) Descriptor() ([]byte, []int) {
	return file_dbp_schema_proto_rawDescGZIP(), []int{9}
}

func (x *RealWorldDataStructureInfo) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *RealWorldDataStructureInfo) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *RealWorldDataStructureInfo) GetUrl() string {
	if x != nil && x.Url != nil {
		return *x.Url
	}
	return ""
}

func (x *RealWorldDataStructureInfo) GetEncodingFormat() string {
	if x != nil && x.EncodingFormat != nil {
		return *x.EncodingFormat
	}
	return ""
}

func (x *RealWorldDataStructureInfo) GetStructure() *_struct.Struct {
	if x != nil {
		return x.Structure
	}
	return nil
}

func (x *RealWorldDataStructureInfo) GetGraphqlSchema() string {
	if x != nil && x.GraphqlSchema != nil {
		return *x.GraphqlSchema
	}
	return ""
}

type RealWorldDataStoringInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        *string              `protobuf:"bytes,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
	Name      *string              `protobuf:"bytes,2,opt,name=name,proto3,oneof" json:"name,omitempty"`
	Url       *string              `protobuf:"bytes,3,opt,name=url,proto3,oneof" json:"url,omitempty"`
	StartTime *timestamp.Timestamp `protobuf:"bytes,4,opt,name=startTime,proto3,oneof" json:"startTime,omitempty"`
	EndTime   *timestamp.Timestamp `protobuf:"bytes,5,opt,name=endTime,proto3,oneof" json:"endTime,omitempty"`
	BaseUrl   *string              `protobuf:"bytes,6,opt,name=baseUrl,proto3,oneof" json:"baseUrl,omitempty"`
	Pattern   *string              `protobuf:"bytes,7,opt,name=pattern,proto3,oneof" json:"pattern,omitempty"`
}

func (x *RealWorldDataStoringInfo) Reset() {
	*x = RealWorldDataStoringInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dbp_schema_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RealWorldDataStoringInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RealWorldDataStoringInfo) ProtoMessage() {}

func (x *RealWorldDataStoringInfo) ProtoReflect() protoreflect.Message {
	mi := &file_dbp_schema_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RealWorldDataStoringInfo.ProtoReflect.Descriptor instead.
func (*RealWorldDataStoringInfo) Descriptor() ([]byte, []int) {
	return file_dbp_schema_proto_rawDescGZIP(), []int{10}
}

func (x *RealWorldDataStoringInfo) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *RealWorldDataStoringInfo) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *RealWorldDataStoringInfo) GetUrl() string {
	if x != nil && x.Url != nil {
		return *x.Url
	}
	return ""
}

func (x *RealWorldDataStoringInfo) GetStartTime() *timestamp.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *RealWorldDataStoringInfo) GetEndTime() *timestamp.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

func (x *RealWorldDataStoringInfo) GetBaseUrl() string {
	if x != nil && x.BaseUrl != nil {
		return *x.BaseUrl
	}
	return ""
}

func (x *RealWorldDataStoringInfo) GetPattern() string {
	if x != nil && x.Pattern != nil {
		return *x.Pattern
	}
	return ""
}

type RealWorldDataRegisterDemand struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      *string           `protobuf:"bytes,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
	Name    *string           `protobuf:"bytes,2,opt,name=name,proto3,oneof" json:"name,omitempty"`
	Url     *string           `protobuf:"bytes,3,opt,name=url,proto3,oneof" json:"url,omitempty"`
	Dataset *RealWorldDataset `protobuf:"bytes,4,opt,name=dataset,proto3,oneof" json:"dataset,omitempty"`
}

func (x *RealWorldDataRegisterDemand) Reset() {
	*x = RealWorldDataRegisterDemand{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dbp_schema_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RealWorldDataRegisterDemand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RealWorldDataRegisterDemand) ProtoMessage() {}

func (x *RealWorldDataRegisterDemand) ProtoReflect() protoreflect.Message {
	mi := &file_dbp_schema_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RealWorldDataRegisterDemand.ProtoReflect.Descriptor instead.
func (*RealWorldDataRegisterDemand) Descriptor() ([]byte, []int) {
	return file_dbp_schema_proto_rawDescGZIP(), []int{11}
}

func (x *RealWorldDataRegisterDemand) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *RealWorldDataRegisterDemand) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *RealWorldDataRegisterDemand) GetUrl() string {
	if x != nil && x.Url != nil {
		return *x.Url
	}
	return ""
}

func (x *RealWorldDataRegisterDemand) GetDataset() *RealWorldDataset {
	if x != nil {
		return x.Dataset
	}
	return nil
}

type RealWorldDataRegisterSupply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      *string           `protobuf:"bytes,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
	Name    *string           `protobuf:"bytes,2,opt,name=name,proto3,oneof" json:"name,omitempty"`
	Url     *string           `protobuf:"bytes,3,opt,name=url,proto3,oneof" json:"url,omitempty"`
	Dataset *RealWorldDataset `protobuf:"bytes,4,opt,name=dataset,proto3,oneof" json:"dataset,omitempty"`
	Status  *string           `protobuf:"bytes,5,opt,name=status,proto3,oneof" json:"status,omitempty"`
}

func (x *RealWorldDataRegisterSupply) Reset() {
	*x = RealWorldDataRegisterSupply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dbp_schema_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RealWorldDataRegisterSupply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RealWorldDataRegisterSupply) ProtoMessage() {}

func (x *RealWorldDataRegisterSupply) ProtoReflect() protoreflect.Message {
	mi := &file_dbp_schema_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RealWorldDataRegisterSupply.ProtoReflect.Descriptor instead.
func (*RealWorldDataRegisterSupply) Descriptor() ([]byte, []int) {
	return file_dbp_schema_proto_rawDescGZIP(), []int{12}
}

func (x *RealWorldDataRegisterSupply) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *RealWorldDataRegisterSupply) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *RealWorldDataRegisterSupply) GetUrl() string {
	if x != nil && x.Url != nil {
		return *x.Url
	}
	return ""
}

func (x *RealWorldDataRegisterSupply) GetDataset() *RealWorldDataset {
	if x != nil {
		return x.Dataset
	}
	return nil
}

func (x *RealWorldDataRegisterSupply) GetStatus() string {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return ""
}

type RealWorldDataCollectionDemand struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             *string                      `protobuf:"bytes,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
	Name           *string                      `protobuf:"bytes,2,opt,name=name,proto3,oneof" json:"name,omitempty"`
	Url            *string                      `protobuf:"bytes,3,opt,name=url,proto3,oneof" json:"url,omitempty"`
	CollectionInfo *RealWorldDataCollectionInfo `protobuf:"bytes,4,opt,name=collectionInfo,proto3,oneof" json:"collectionInfo,omitempty"`
}

func (x *RealWorldDataCollectionDemand) Reset() {
	*x = RealWorldDataCollectionDemand{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dbp_schema_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RealWorldDataCollectionDemand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RealWorldDataCollectionDemand) ProtoMessage() {}

func (x *RealWorldDataCollectionDemand) ProtoReflect() protoreflect.Message {
	mi := &file_dbp_schema_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RealWorldDataCollectionDemand.ProtoReflect.Descriptor instead.
func (*RealWorldDataCollectionDemand) Descriptor() ([]byte, []int) {
	return file_dbp_schema_proto_rawDescGZIP(), []int{13}
}

func (x *RealWorldDataCollectionDemand) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *RealWorldDataCollectionDemand) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *RealWorldDataCollectionDemand) GetUrl() string {
	if x != nil && x.Url != nil {
		return *x.Url
	}
	return ""
}

func (x *RealWorldDataCollectionDemand) GetCollectionInfo() *RealWorldDataCollectionInfo {
	if x != nil {
		return x.CollectionInfo
	}
	return nil
}

type RealWorldDataCollectionSupply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             *string                      `protobuf:"bytes,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
	Name           *string                      `protobuf:"bytes,2,opt,name=name,proto3,oneof" json:"name,omitempty"`
	Url            *string                      `protobuf:"bytes,3,opt,name=url,proto3,oneof" json:"url,omitempty"`
	CollectionInfo *RealWorldDataCollectionInfo `protobuf:"bytes,4,opt,name=collectionInfo,proto3,oneof" json:"collectionInfo,omitempty"`
	Status         *string                      `protobuf:"bytes,5,opt,name=status,proto3,oneof" json:"status,omitempty"`
}

func (x *RealWorldDataCollectionSupply) Reset() {
	*x = RealWorldDataCollectionSupply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dbp_schema_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RealWorldDataCollectionSupply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RealWorldDataCollectionSupply) ProtoMessage() {}

func (x *RealWorldDataCollectionSupply) ProtoReflect() protoreflect.Message {
	mi := &file_dbp_schema_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RealWorldDataCollectionSupply.ProtoReflect.Descriptor instead.
func (*RealWorldDataCollectionSupply) Descriptor() ([]byte, []int) {
	return file_dbp_schema_proto_rawDescGZIP(), []int{14}
}

func (x *RealWorldDataCollectionSupply) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *RealWorldDataCollectionSupply) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *RealWorldDataCollectionSupply) GetUrl() string {
	if x != nil && x.Url != nil {
		return *x.Url
	}
	return ""
}

func (x *RealWorldDataCollectionSupply) GetCollectionInfo() *RealWorldDataCollectionInfo {
	if x != nil {
		return x.CollectionInfo
	}
	return nil
}

func (x *RealWorldDataCollectionSupply) GetStatus() string {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return ""
}

type RealWorldDataCollectionStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                   *string                      `protobuf:"bytes,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
	Name                 *string                      `protobuf:"bytes,2,opt,name=name,proto3,oneof" json:"name,omitempty"`
	Url                  *string                      `protobuf:"bytes,3,opt,name=url,proto3,oneof" json:"url,omitempty"`
	CollectionInfo       *RealWorldDataCollectionInfo `protobuf:"bytes,4,opt,name=collectionInfo,proto3,oneof" json:"collectionInfo,omitempty"`
	ContentReferenceTime *string                      `protobuf:"bytes,5,opt,name=contentReferenceTime,proto3,oneof" json:"contentReferenceTime,omitempty"`
	ActiveConnections    []*_struct.Struct            `protobuf:"bytes,6,rep,name=activeConnections,proto3" json:"activeConnections,omitempty"`
	TrafficStatistics    []*_struct.Struct            `protobuf:"bytes,7,rep,name=trafficStatistics,proto3" json:"trafficStatistics,omitempty"`
}

func (x *RealWorldDataCollectionStatus) Reset() {
	*x = RealWorldDataCollectionStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dbp_schema_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RealWorldDataCollectionStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RealWorldDataCollectionStatus) ProtoMessage() {}

func (x *RealWorldDataCollectionStatus) ProtoReflect() protoreflect.Message {
	mi := &file_dbp_schema_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RealWorldDataCollectionStatus.ProtoReflect.Descriptor instead.
func (*RealWorldDataCollectionStatus) Descriptor() ([]byte, []int) {
	return file_dbp_schema_proto_rawDescGZIP(), []int{15}
}

func (x *RealWorldDataCollectionStatus) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *RealWorldDataCollectionStatus) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *RealWorldDataCollectionStatus) GetUrl() string {
	if x != nil && x.Url != nil {
		return *x.Url
	}
	return ""
}

func (x *RealWorldDataCollectionStatus) GetCollectionInfo() *RealWorldDataCollectionInfo {
	if x != nil {
		return x.CollectionInfo
	}
	return nil
}

func (x *RealWorldDataCollectionStatus) GetContentReferenceTime() string {
	if x != nil && x.ContentReferenceTime != nil {
		return *x.ContentReferenceTime
	}
	return ""
}

func (x *RealWorldDataCollectionStatus) GetActiveConnections() []*_struct.Struct {
	if x != nil {
		return x.ActiveConnections
	}
	return nil
}

func (x *RealWorldDataCollectionStatus) GetTrafficStatistics() []*_struct.Struct {
	if x != nil {
		return x.TrafficStatistics
	}
	return nil
}

type RealWorldDataBrewingDemand struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                *string                         `protobuf:"bytes,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
	Name              *string                         `protobuf:"bytes,2,opt,name=name,proto3,oneof" json:"name,omitempty"`
	Url               *string                         `protobuf:"bytes,3,opt,name=url,proto3,oneof" json:"url,omitempty"`
	BrewerInfo        *RealWorldDataBrewerInfo        `protobuf:"bytes,4,opt,name=brewerInfo,proto3,oneof" json:"brewerInfo,omitempty"`
	BrewerInput       []*RealWorldDataBrewerInput     `protobuf:"bytes,5,rep,name=brewerInput,proto3" json:"brewerInput,omitempty"`
	BrewingArgument   []*RealWorldDataBrewingArgument `protobuf:"bytes,6,rep,name=brewingArgument,proto3" json:"brewingArgument,omitempty"`
	BrewerOutputStore []*RealWorldDataStoringInfo     `protobuf:"bytes,7,rep,name=brewerOutputStore,proto3" json:"brewerOutputStore,omitempty"`
}

func (x *RealWorldDataBrewingDemand) Reset() {
	*x = RealWorldDataBrewingDemand{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dbp_schema_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RealWorldDataBrewingDemand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RealWorldDataBrewingDemand) ProtoMessage() {}

func (x *RealWorldDataBrewingDemand) ProtoReflect() protoreflect.Message {
	mi := &file_dbp_schema_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RealWorldDataBrewingDemand.ProtoReflect.Descriptor instead.
func (*RealWorldDataBrewingDemand) Descriptor() ([]byte, []int) {
	return file_dbp_schema_proto_rawDescGZIP(), []int{16}
}

func (x *RealWorldDataBrewingDemand) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *RealWorldDataBrewingDemand) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *RealWorldDataBrewingDemand) GetUrl() string {
	if x != nil && x.Url != nil {
		return *x.Url
	}
	return ""
}

func (x *RealWorldDataBrewingDemand) GetBrewerInfo() *RealWorldDataBrewerInfo {
	if x != nil {
		return x.BrewerInfo
	}
	return nil
}

func (x *RealWorldDataBrewingDemand) GetBrewerInput() []*RealWorldDataBrewerInput {
	if x != nil {
		return x.BrewerInput
	}
	return nil
}

func (x *RealWorldDataBrewingDemand) GetBrewingArgument() []*RealWorldDataBrewingArgument {
	if x != nil {
		return x.BrewingArgument
	}
	return nil
}

func (x *RealWorldDataBrewingDemand) GetBrewerOutputStore() []*RealWorldDataStoringInfo {
	if x != nil {
		return x.BrewerOutputStore
	}
	return nil
}

type RealWorldDataBrewingSupply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              *string                         `protobuf:"bytes,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
	Name            *string                         `protobuf:"bytes,2,opt,name=name,proto3,oneof" json:"name,omitempty"`
	Url             *string                         `protobuf:"bytes,3,opt,name=url,proto3,oneof" json:"url,omitempty"`
	BrewerInfo      *RealWorldDataBrewerInfo        `protobuf:"bytes,4,opt,name=brewerInfo,proto3,oneof" json:"brewerInfo,omitempty"`
	BrewerOutput    []*RealWorldDataBrewerOutput    `protobuf:"bytes,5,rep,name=brewerOutput,proto3" json:"brewerOutput,omitempty"`
	BrewingArgument []*RealWorldDataBrewingArgument `protobuf:"bytes,6,rep,name=brewingArgument,proto3" json:"brewingArgument,omitempty"`
}

func (x *RealWorldDataBrewingSupply) Reset() {
	*x = RealWorldDataBrewingSupply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dbp_schema_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RealWorldDataBrewingSupply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RealWorldDataBrewingSupply) ProtoMessage() {}

func (x *RealWorldDataBrewingSupply) ProtoReflect() protoreflect.Message {
	mi := &file_dbp_schema_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RealWorldDataBrewingSupply.ProtoReflect.Descriptor instead.
func (*RealWorldDataBrewingSupply) Descriptor() ([]byte, []int) {
	return file_dbp_schema_proto_rawDescGZIP(), []int{17}
}

func (x *RealWorldDataBrewingSupply) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *RealWorldDataBrewingSupply) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *RealWorldDataBrewingSupply) GetUrl() string {
	if x != nil && x.Url != nil {
		return *x.Url
	}
	return ""
}

func (x *RealWorldDataBrewingSupply) GetBrewerInfo() *RealWorldDataBrewerInfo {
	if x != nil {
		return x.BrewerInfo
	}
	return nil
}

func (x *RealWorldDataBrewingSupply) GetBrewerOutput() []*RealWorldDataBrewerOutput {
	if x != nil {
		return x.BrewerOutput
	}
	return nil
}

func (x *RealWorldDataBrewingSupply) GetBrewingArgument() []*RealWorldDataBrewingArgument {
	if x != nil {
		return x.BrewingArgument
	}
	return nil
}

type RealWorldDataPeriodicBrewingConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            *string                     `protobuf:"bytes,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
	Name          *string                     `protobuf:"bytes,2,opt,name=name,proto3,oneof" json:"name,omitempty"`
	Url           *string                     `protobuf:"bytes,3,opt,name=url,proto3,oneof" json:"url,omitempty"`
	BrewingConfig *RealWorldDataBrewingDemand `protobuf:"bytes,4,opt,name=brewingConfig,proto3,oneof" json:"brewingConfig,omitempty"` // 投げる Demand
	CronConfig    *string                     `protobuf:"bytes,5,opt,name=cronConfig,proto3,oneof" json:"cronConfig,omitempty"`       // 時間間隔 (cron format)
}

func (x *RealWorldDataPeriodicBrewingConfig) Reset() {
	*x = RealWorldDataPeriodicBrewingConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dbp_schema_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RealWorldDataPeriodicBrewingConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RealWorldDataPeriodicBrewingConfig) ProtoMessage() {}

func (x *RealWorldDataPeriodicBrewingConfig) ProtoReflect() protoreflect.Message {
	mi := &file_dbp_schema_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RealWorldDataPeriodicBrewingConfig.ProtoReflect.Descriptor instead.
func (*RealWorldDataPeriodicBrewingConfig) Descriptor() ([]byte, []int) {
	return file_dbp_schema_proto_rawDescGZIP(), []int{18}
}

func (x *RealWorldDataPeriodicBrewingConfig) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *RealWorldDataPeriodicBrewingConfig) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *RealWorldDataPeriodicBrewingConfig) GetUrl() string {
	if x != nil && x.Url != nil {
		return *x.Url
	}
	return ""
}

func (x *RealWorldDataPeriodicBrewingConfig) GetBrewingConfig() *RealWorldDataBrewingDemand {
	if x != nil {
		return x.BrewingConfig
	}
	return nil
}

func (x *RealWorldDataPeriodicBrewingConfig) GetCronConfig() string {
	if x != nil && x.CronConfig != nil {
		return *x.CronConfig
	}
	return ""
}

type RealWorldDataReadDemand struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             *string           `protobuf:"bytes,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
	Name           *string           `protobuf:"bytes,2,opt,name=name,proto3,oneof" json:"name,omitempty"`
	Url            *string           `protobuf:"bytes,3,opt,name=url,proto3,oneof" json:"url,omitempty"`
	Dataset        *RealWorldDataset `protobuf:"bytes,4,opt,name=dataset,proto3,oneof" json:"dataset,omitempty"`
	GraphqlQuery   *string           `protobuf:"bytes,5,opt,name=graphqlQuery,proto3,oneof" json:"graphqlQuery,omitempty"`
	TimerangeQuery *string           `protobuf:"bytes,6,opt,name=timerangeQuery,proto3,oneof" json:"timerangeQuery,omitempty"`
	SparqlQuery    *string           `protobuf:"bytes,7,opt,name=sparqlQuery,proto3,oneof" json:"sparqlQuery,omitempty"`
}

func (x *RealWorldDataReadDemand) Reset() {
	*x = RealWorldDataReadDemand{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dbp_schema_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RealWorldDataReadDemand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RealWorldDataReadDemand) ProtoMessage() {}

func (x *RealWorldDataReadDemand) ProtoReflect() protoreflect.Message {
	mi := &file_dbp_schema_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RealWorldDataReadDemand.ProtoReflect.Descriptor instead.
func (*RealWorldDataReadDemand) Descriptor() ([]byte, []int) {
	return file_dbp_schema_proto_rawDescGZIP(), []int{19}
}

func (x *RealWorldDataReadDemand) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *RealWorldDataReadDemand) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *RealWorldDataReadDemand) GetUrl() string {
	if x != nil && x.Url != nil {
		return *x.Url
	}
	return ""
}

func (x *RealWorldDataReadDemand) GetDataset() *RealWorldDataset {
	if x != nil {
		return x.Dataset
	}
	return nil
}

func (x *RealWorldDataReadDemand) GetGraphqlQuery() string {
	if x != nil && x.GraphqlQuery != nil {
		return *x.GraphqlQuery
	}
	return ""
}

func (x *RealWorldDataReadDemand) GetTimerangeQuery() string {
	if x != nil && x.TimerangeQuery != nil {
		return *x.TimerangeQuery
	}
	return ""
}

func (x *RealWorldDataReadDemand) GetSparqlQuery() string {
	if x != nil && x.SparqlQuery != nil {
		return *x.SparqlQuery
	}
	return ""
}

type RealWorldDataReadSupply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             *string           `protobuf:"bytes,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
	Name           *string           `protobuf:"bytes,2,opt,name=name,proto3,oneof" json:"name,omitempty"`
	Url            *string           `protobuf:"bytes,3,opt,name=url,proto3,oneof" json:"url,omitempty"`
	Dataset        *RealWorldDataset `protobuf:"bytes,4,opt,name=dataset,proto3,oneof" json:"dataset,omitempty"`
	GraphqlQuery   *string           `protobuf:"bytes,5,opt,name=graphqlQuery,proto3,oneof" json:"graphqlQuery,omitempty"`
	TimerangeQuery *string           `protobuf:"bytes,6,opt,name=timerangeQuery,proto3,oneof" json:"timerangeQuery,omitempty"`
	SparqlQuery    *string           `protobuf:"bytes,7,opt,name=sparqlQuery,proto3,oneof" json:"sparqlQuery,omitempty"`
	Data           []byte            `protobuf:"bytes,8,opt,name=data,proto3,oneof" json:"data,omitempty"`
}

func (x *RealWorldDataReadSupply) Reset() {
	*x = RealWorldDataReadSupply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dbp_schema_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RealWorldDataReadSupply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RealWorldDataReadSupply) ProtoMessage() {}

func (x *RealWorldDataReadSupply) ProtoReflect() protoreflect.Message {
	mi := &file_dbp_schema_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RealWorldDataReadSupply.ProtoReflect.Descriptor instead.
func (*RealWorldDataReadSupply) Descriptor() ([]byte, []int) {
	return file_dbp_schema_proto_rawDescGZIP(), []int{20}
}

func (x *RealWorldDataReadSupply) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *RealWorldDataReadSupply) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *RealWorldDataReadSupply) GetUrl() string {
	if x != nil && x.Url != nil {
		return *x.Url
	}
	return ""
}

func (x *RealWorldDataReadSupply) GetDataset() *RealWorldDataset {
	if x != nil {
		return x.Dataset
	}
	return nil
}

func (x *RealWorldDataReadSupply) GetGraphqlQuery() string {
	if x != nil && x.GraphqlQuery != nil {
		return *x.GraphqlQuery
	}
	return ""
}

func (x *RealWorldDataReadSupply) GetTimerangeQuery() string {
	if x != nil && x.TimerangeQuery != nil {
		return *x.TimerangeQuery
	}
	return ""
}

func (x *RealWorldDataReadSupply) GetSparqlQuery() string {
	if x != nil && x.SparqlQuery != nil {
		return *x.SparqlQuery
	}
	return ""
}

func (x *RealWorldDataReadSupply) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type RealWorldDataWriteDemand struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              *string           `protobuf:"bytes,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
	Name            *string           `protobuf:"bytes,2,opt,name=name,proto3,oneof" json:"name,omitempty"`
	Url             *string           `protobuf:"bytes,3,opt,name=url,proto3,oneof" json:"url,omitempty"`
	Dataset         *RealWorldDataset `protobuf:"bytes,4,opt,name=dataset,proto3,oneof" json:"dataset,omitempty"`
	TimePeriodStart *string           `protobuf:"bytes,5,opt,name=timePeriodStart,proto3,oneof" json:"timePeriodStart,omitempty"` // 書き込むデータがいつからのデータか
	TimePeriodEnd   *string           `protobuf:"bytes,6,opt,name=timePeriodEnd,proto3,oneof" json:"timePeriodEnd,omitempty"`     // 書き込むデータがいつまでのデータか
	Data            []byte            `protobuf:"bytes,7,opt,name=data,proto3,oneof" json:"data,omitempty"`
}

func (x *RealWorldDataWriteDemand) Reset() {
	*x = RealWorldDataWriteDemand{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dbp_schema_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RealWorldDataWriteDemand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RealWorldDataWriteDemand) ProtoMessage() {}

func (x *RealWorldDataWriteDemand) ProtoReflect() protoreflect.Message {
	mi := &file_dbp_schema_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RealWorldDataWriteDemand.ProtoReflect.Descriptor instead.
func (*RealWorldDataWriteDemand) Descriptor() ([]byte, []int) {
	return file_dbp_schema_proto_rawDescGZIP(), []int{21}
}

func (x *RealWorldDataWriteDemand) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *RealWorldDataWriteDemand) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *RealWorldDataWriteDemand) GetUrl() string {
	if x != nil && x.Url != nil {
		return *x.Url
	}
	return ""
}

func (x *RealWorldDataWriteDemand) GetDataset() *RealWorldDataset {
	if x != nil {
		return x.Dataset
	}
	return nil
}

func (x *RealWorldDataWriteDemand) GetTimePeriodStart() string {
	if x != nil && x.TimePeriodStart != nil {
		return *x.TimePeriodStart
	}
	return ""
}

func (x *RealWorldDataWriteDemand) GetTimePeriodEnd() string {
	if x != nil && x.TimePeriodEnd != nil {
		return *x.TimePeriodEnd
	}
	return ""
}

func (x *RealWorldDataWriteDemand) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type RealWorldDataWriteSupply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              *string           `protobuf:"bytes,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
	Name            *string           `protobuf:"bytes,2,opt,name=name,proto3,oneof" json:"name,omitempty"`
	Url             *string           `protobuf:"bytes,3,opt,name=url,proto3,oneof" json:"url,omitempty"`
	Dataset         *RealWorldDataset `protobuf:"bytes,4,opt,name=dataset,proto3,oneof" json:"dataset,omitempty"`
	TimePeriodStart *string           `protobuf:"bytes,5,opt,name=timePeriodStart,proto3,oneof" json:"timePeriodStart,omitempty"` // 書き込んだデータがいつからのデータか
	TimePeriodEnd   *string           `protobuf:"bytes,6,opt,name=timePeriodEnd,proto3,oneof" json:"timePeriodEnd,omitempty"`     // 書き込んだデータがいつまでのデータか
}

func (x *RealWorldDataWriteSupply) Reset() {
	*x = RealWorldDataWriteSupply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dbp_schema_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RealWorldDataWriteSupply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RealWorldDataWriteSupply) ProtoMessage() {}

func (x *RealWorldDataWriteSupply) ProtoReflect() protoreflect.Message {
	mi := &file_dbp_schema_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RealWorldDataWriteSupply.ProtoReflect.Descriptor instead.
func (*RealWorldDataWriteSupply) Descriptor() ([]byte, []int) {
	return file_dbp_schema_proto_rawDescGZIP(), []int{22}
}

func (x *RealWorldDataWriteSupply) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *RealWorldDataWriteSupply) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *RealWorldDataWriteSupply) GetUrl() string {
	if x != nil && x.Url != nil {
		return *x.Url
	}
	return ""
}

func (x *RealWorldDataWriteSupply) GetDataset() *RealWorldDataset {
	if x != nil {
		return x.Dataset
	}
	return nil
}

func (x *RealWorldDataWriteSupply) GetTimePeriodStart() string {
	if x != nil && x.TimePeriodStart != nil {
		return *x.TimePeriodStart
	}
	return ""
}

func (x *RealWorldDataWriteSupply) GetTimePeriodEnd() string {
	if x != nil && x.TimePeriodEnd != nil {
		return *x.TimePeriodEnd
	}
	return ""
}

type RealWorldDataMoveDemand struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                    *string                   `protobuf:"bytes,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
	Name                  *string                   `protobuf:"bytes,2,opt,name=name,proto3,oneof" json:"name,omitempty"`
	Url                   *string                   `protobuf:"bytes,3,opt,name=url,proto3,oneof" json:"url,omitempty"`
	TargetDataset         *RealWorldDataset         `protobuf:"bytes,4,opt,name=targetDataset,proto3,oneof" json:"targetDataset,omitempty"`                 // 移動する RealWorldDataset
	TargetTimePeriodStart *string                   `protobuf:"bytes,5,opt,name=targetTimePeriodStart,proto3,oneof" json:"targetTimePeriodStart,omitempty"` // 移動する RealWorldDataset のうち対象となるデータの開始時刻はどれだけ前か (ex. 8d → 8日前)
	TargetTimePeriodEnd   *string                   `protobuf:"bytes,6,opt,name=targetTimePeriodEnd,proto3,oneof" json:"targetTimePeriodEnd,omitempty"`     // 移動する RealWorldDataset のうち対象となるデータの終了時刻はどれだけ前か (ex. 7d → 7日前)
	MoveFrom              *RealWorldDataStoringInfo `protobuf:"bytes,7,opt,name=moveFrom,proto3,oneof" json:"moveFrom,omitempty"`                           // データの移動元
	MoveTo                *RealWorldDataStoringInfo `protobuf:"bytes,8,opt,name=moveTo,proto3,oneof" json:"moveTo,omitempty"`                               // データの移動先
}

func (x *RealWorldDataMoveDemand) Reset() {
	*x = RealWorldDataMoveDemand{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dbp_schema_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RealWorldDataMoveDemand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RealWorldDataMoveDemand) ProtoMessage() {}

func (x *RealWorldDataMoveDemand) ProtoReflect() protoreflect.Message {
	mi := &file_dbp_schema_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RealWorldDataMoveDemand.ProtoReflect.Descriptor instead.
func (*RealWorldDataMoveDemand) Descriptor() ([]byte, []int) {
	return file_dbp_schema_proto_rawDescGZIP(), []int{23}
}

func (x *RealWorldDataMoveDemand) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *RealWorldDataMoveDemand) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *RealWorldDataMoveDemand) GetUrl() string {
	if x != nil && x.Url != nil {
		return *x.Url
	}
	return ""
}

func (x *RealWorldDataMoveDemand) GetTargetDataset() *RealWorldDataset {
	if x != nil {
		return x.TargetDataset
	}
	return nil
}

func (x *RealWorldDataMoveDemand) GetTargetTimePeriodStart() string {
	if x != nil && x.TargetTimePeriodStart != nil {
		return *x.TargetTimePeriodStart
	}
	return ""
}

func (x *RealWorldDataMoveDemand) GetTargetTimePeriodEnd() string {
	if x != nil && x.TargetTimePeriodEnd != nil {
		return *x.TargetTimePeriodEnd
	}
	return ""
}

func (x *RealWorldDataMoveDemand) GetMoveFrom() *RealWorldDataStoringInfo {
	if x != nil {
		return x.MoveFrom
	}
	return nil
}

func (x *RealWorldDataMoveDemand) GetMoveTo() *RealWorldDataStoringInfo {
	if x != nil {
		return x.MoveTo
	}
	return nil
}

type RealWorldDataMoveSupply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                    *string                   `protobuf:"bytes,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
	Name                  *string                   `protobuf:"bytes,2,opt,name=name,proto3,oneof" json:"name,omitempty"`
	Url                   *string                   `protobuf:"bytes,3,opt,name=url,proto3,oneof" json:"url,omitempty"`
	TargetDataset         *RealWorldDataset         `protobuf:"bytes,4,opt,name=targetDataset,proto3,oneof" json:"targetDataset,omitempty"`                 // 移動した RealWorldDataset
	TargetTimePeriodStart *string                   `protobuf:"bytes,5,opt,name=targetTimePeriodStart,proto3,oneof" json:"targetTimePeriodStart,omitempty"` // 移動した RealWorldDataset のうち対象となるデータの開始時刻はどれだけ前か (ex. 8d → 8日前)
	TargetTimePeriodEnd   *string                   `protobuf:"bytes,6,opt,name=targetTimePeriodEnd,proto3,oneof" json:"targetTimePeriodEnd,omitempty"`     // 移動した RealWorldDataset のうち対象となるデータの終了時刻はどれだけ前か (ex. 7d → 7日前)
	MoveFrom              *RealWorldDataStoringInfo `protobuf:"bytes,7,opt,name=moveFrom,proto3,oneof" json:"moveFrom,omitempty"`                           // データの移動元
	MoveTo                *RealWorldDataStoringInfo `protobuf:"bytes,8,opt,name=moveTo,proto3,oneof" json:"moveTo,omitempty"`                               // データの移動先
	MovedDataset          *RealWorldDataset         `protobuf:"bytes,9,opt,name=movedDataset,proto3,oneof" json:"movedDataset,omitempty"`                   // 移動先の RealWorldDataset
}

func (x *RealWorldDataMoveSupply) Reset() {
	*x = RealWorldDataMoveSupply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dbp_schema_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RealWorldDataMoveSupply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RealWorldDataMoveSupply) ProtoMessage() {}

func (x *RealWorldDataMoveSupply) ProtoReflect() protoreflect.Message {
	mi := &file_dbp_schema_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RealWorldDataMoveSupply.ProtoReflect.Descriptor instead.
func (*RealWorldDataMoveSupply) Descriptor() ([]byte, []int) {
	return file_dbp_schema_proto_rawDescGZIP(), []int{24}
}

func (x *RealWorldDataMoveSupply) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *RealWorldDataMoveSupply) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *RealWorldDataMoveSupply) GetUrl() string {
	if x != nil && x.Url != nil {
		return *x.Url
	}
	return ""
}

func (x *RealWorldDataMoveSupply) GetTargetDataset() *RealWorldDataset {
	if x != nil {
		return x.TargetDataset
	}
	return nil
}

func (x *RealWorldDataMoveSupply) GetTargetTimePeriodStart() string {
	if x != nil && x.TargetTimePeriodStart != nil {
		return *x.TargetTimePeriodStart
	}
	return ""
}

func (x *RealWorldDataMoveSupply) GetTargetTimePeriodEnd() string {
	if x != nil && x.TargetTimePeriodEnd != nil {
		return *x.TargetTimePeriodEnd
	}
	return ""
}

func (x *RealWorldDataMoveSupply) GetMoveFrom() *RealWorldDataStoringInfo {
	if x != nil {
		return x.MoveFrom
	}
	return nil
}

func (x *RealWorldDataMoveSupply) GetMoveTo() *RealWorldDataStoringInfo {
	if x != nil {
		return x.MoveTo
	}
	return nil
}

func (x *RealWorldDataMoveSupply) GetMovedDataset() *RealWorldDataset {
	if x != nil {
		return x.MovedDataset
	}
	return nil
}

type RealWorldDataPeriodicMoveConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         *string                  `protobuf:"bytes,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
	Name       *string                  `protobuf:"bytes,2,opt,name=name,proto3,oneof" json:"name,omitempty"`
	Url        *string                  `protobuf:"bytes,3,opt,name=url,proto3,oneof" json:"url,omitempty"`
	MoveConfig *RealWorldDataMoveDemand `protobuf:"bytes,4,opt,name=moveConfig,proto3,oneof" json:"moveConfig,omitempty"` // 移動設定
	CronConfig *string                  `protobuf:"bytes,5,opt,name=cronConfig,proto3,oneof" json:"cronConfig,omitempty"` // 時間間隔 (cron format)
}

func (x *RealWorldDataPeriodicMoveConfig) Reset() {
	*x = RealWorldDataPeriodicMoveConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dbp_schema_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RealWorldDataPeriodicMoveConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RealWorldDataPeriodicMoveConfig) ProtoMessage() {}

func (x *RealWorldDataPeriodicMoveConfig) ProtoReflect() protoreflect.Message {
	mi := &file_dbp_schema_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RealWorldDataPeriodicMoveConfig.ProtoReflect.Descriptor instead.
func (*RealWorldDataPeriodicMoveConfig) Descriptor() ([]byte, []int) {
	return file_dbp_schema_proto_rawDescGZIP(), []int{25}
}

func (x *RealWorldDataPeriodicMoveConfig) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *RealWorldDataPeriodicMoveConfig) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *RealWorldDataPeriodicMoveConfig) GetUrl() string {
	if x != nil && x.Url != nil {
		return *x.Url
	}
	return ""
}

func (x *RealWorldDataPeriodicMoveConfig) GetMoveConfig() *RealWorldDataMoveDemand {
	if x != nil {
		return x.MoveConfig
	}
	return nil
}

func (x *RealWorldDataPeriodicMoveConfig) GetCronConfig() string {
	if x != nil && x.CronConfig != nil {
		return *x.CronConfig
	}
	return ""
}

type RealWorldDataRemoveDemand struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                    *string           `protobuf:"bytes,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
	Name                  *string           `protobuf:"bytes,2,opt,name=name,proto3,oneof" json:"name,omitempty"`
	Url                   *string           `protobuf:"bytes,3,opt,name=url,proto3,oneof" json:"url,omitempty"`
	Dataset               *RealWorldDataset `protobuf:"bytes,4,opt,name=dataset,proto3,oneof" json:"dataset,omitempty"`                             // 削除する RealWorldDataset
	TargetTimePeriodStart *string           `protobuf:"bytes,5,opt,name=targetTimePeriodStart,proto3,oneof" json:"targetTimePeriodStart,omitempty"` // 削除する RealWorldDataset のうち対象となるデータの開始時刻はどれだけ前か (ex. 8d → 8日前)
	TargetTimePeriodEnd   *string           `protobuf:"bytes,6,opt,name=targetTimePeriodEnd,proto3,oneof" json:"targetTimePeriodEnd,omitempty"`     // 削除する RealWorldDataset のうち対象となるデータの終了時刻はどれだけ前か (ex. 7d → 7日前)
}

func (x *RealWorldDataRemoveDemand) Reset() {
	*x = RealWorldDataRemoveDemand{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dbp_schema_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RealWorldDataRemoveDemand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RealWorldDataRemoveDemand) ProtoMessage() {}

func (x *RealWorldDataRemoveDemand) ProtoReflect() protoreflect.Message {
	mi := &file_dbp_schema_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RealWorldDataRemoveDemand.ProtoReflect.Descriptor instead.
func (*RealWorldDataRemoveDemand) Descriptor() ([]byte, []int) {
	return file_dbp_schema_proto_rawDescGZIP(), []int{26}
}

func (x *RealWorldDataRemoveDemand) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *RealWorldDataRemoveDemand) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *RealWorldDataRemoveDemand) GetUrl() string {
	if x != nil && x.Url != nil {
		return *x.Url
	}
	return ""
}

func (x *RealWorldDataRemoveDemand) GetDataset() *RealWorldDataset {
	if x != nil {
		return x.Dataset
	}
	return nil
}

func (x *RealWorldDataRemoveDemand) GetTargetTimePeriodStart() string {
	if x != nil && x.TargetTimePeriodStart != nil {
		return *x.TargetTimePeriodStart
	}
	return ""
}

func (x *RealWorldDataRemoveDemand) GetTargetTimePeriodEnd() string {
	if x != nil && x.TargetTimePeriodEnd != nil {
		return *x.TargetTimePeriodEnd
	}
	return ""
}

type RealWorldDataRemoveSupply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                    *string           `protobuf:"bytes,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
	Name                  *string           `protobuf:"bytes,2,opt,name=name,proto3,oneof" json:"name,omitempty"`
	Url                   *string           `protobuf:"bytes,3,opt,name=url,proto3,oneof" json:"url,omitempty"`
	Dataset               *RealWorldDataset `protobuf:"bytes,4,opt,name=dataset,proto3,oneof" json:"dataset,omitempty"`                             // 削除した RealWorldDataset
	TargetTimePeriodStart *string           `protobuf:"bytes,5,opt,name=targetTimePeriodStart,proto3,oneof" json:"targetTimePeriodStart,omitempty"` // 削除した RealWorldDataset のうち対象となるデータの開始時刻はどれだけ前か (ex. 8d → 8日前)
	TargetTimePeriodEnd   *string           `protobuf:"bytes,6,opt,name=targetTimePeriodEnd,proto3,oneof" json:"targetTimePeriodEnd,omitempty"`     // 削除した RealWorldDataset のうち対象となるデータの終了時刻はどれだけ前か (ex. 7d → 7日前)
}

func (x *RealWorldDataRemoveSupply) Reset() {
	*x = RealWorldDataRemoveSupply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dbp_schema_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RealWorldDataRemoveSupply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RealWorldDataRemoveSupply) ProtoMessage() {}

func (x *RealWorldDataRemoveSupply) ProtoReflect() protoreflect.Message {
	mi := &file_dbp_schema_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RealWorldDataRemoveSupply.ProtoReflect.Descriptor instead.
func (*RealWorldDataRemoveSupply) Descriptor() ([]byte, []int) {
	return file_dbp_schema_proto_rawDescGZIP(), []int{27}
}

func (x *RealWorldDataRemoveSupply) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *RealWorldDataRemoveSupply) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *RealWorldDataRemoveSupply) GetUrl() string {
	if x != nil && x.Url != nil {
		return *x.Url
	}
	return ""
}

func (x *RealWorldDataRemoveSupply) GetDataset() *RealWorldDataset {
	if x != nil {
		return x.Dataset
	}
	return nil
}

func (x *RealWorldDataRemoveSupply) GetTargetTimePeriodStart() string {
	if x != nil && x.TargetTimePeriodStart != nil {
		return *x.TargetTimePeriodStart
	}
	return ""
}

func (x *RealWorldDataRemoveSupply) GetTargetTimePeriodEnd() string {
	if x != nil && x.TargetTimePeriodEnd != nil {
		return *x.TargetTimePeriodEnd
	}
	return ""
}

type RealWorldDataPeriodicRemoveConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           *string                    `protobuf:"bytes,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
	Name         *string                    `protobuf:"bytes,2,opt,name=name,proto3,oneof" json:"name,omitempty"`
	Url          *string                    `protobuf:"bytes,3,opt,name=url,proto3,oneof" json:"url,omitempty"`
	RemoveConfig *RealWorldDataRemoveDemand `protobuf:"bytes,4,opt,name=removeConfig,proto3,oneof" json:"removeConfig,omitempty"` // 削除設定
	CronConfig   *string                    `protobuf:"bytes,5,opt,name=cronConfig,proto3,oneof" json:"cronConfig,omitempty"`     // 時間間隔 (cron format)
}

func (x *RealWorldDataPeriodicRemoveConfig) Reset() {
	*x = RealWorldDataPeriodicRemoveConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dbp_schema_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RealWorldDataPeriodicRemoveConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RealWorldDataPeriodicRemoveConfig) ProtoMessage() {}

func (x *RealWorldDataPeriodicRemoveConfig) ProtoReflect() protoreflect.Message {
	mi := &file_dbp_schema_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RealWorldDataPeriodicRemoveConfig.ProtoReflect.Descriptor instead.
func (*RealWorldDataPeriodicRemoveConfig) Descriptor() ([]byte, []int) {
	return file_dbp_schema_proto_rawDescGZIP(), []int{28}
}

func (x *RealWorldDataPeriodicRemoveConfig) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *RealWorldDataPeriodicRemoveConfig) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *RealWorldDataPeriodicRemoveConfig) GetUrl() string {
	if x != nil && x.Url != nil {
		return *x.Url
	}
	return ""
}

func (x *RealWorldDataPeriodicRemoveConfig) GetRemoveConfig() *RealWorldDataRemoveDemand {
	if x != nil {
		return x.RemoveConfig
	}
	return nil
}

func (x *RealWorldDataPeriodicRemoveConfig) GetCronConfig() string {
	if x != nil && x.CronConfig != nil {
		return *x.CronConfig
	}
	return ""
}

var File_dbp_schema_proto protoreflect.FileDescriptor

var file_dbp_schema_proto_rawDesc = []byte{
	0x0a, 0x10, 0x64, 0x62, 0x70, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x0a, 0x64, 0x62, 0x70, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x1a, 0x1f,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x92, 0x09,
	0x0a, 0x10, 0x52, 0x65, 0x61, 0x6c, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x44, 0x61, 0x74, 0x61, 0x73,
	0x65, 0x74, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x02, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x15, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52,
	0x03, 0x75, 0x72, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x51, 0x0a, 0x0d, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26,
	0x2e, 0x64, 0x62, 0x70, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x52, 0x65, 0x61, 0x6c,
	0x57, 0x6f, 0x72, 0x6c, 0x64, 0x44, 0x61, 0x74, 0x61, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x03, 0x52, 0x0d, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x75, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x42, 0x0a, 0x0d, 0x67, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x46, 0x72, 0x6f, 0x6d, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x64, 0x62, 0x70, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x52,
	0x65, 0x61, 0x6c, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x52,
	0x0d, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x50,
	0x0a, 0x0e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x55, 0x73, 0x69, 0x6e, 0x67,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x64, 0x62, 0x70, 0x5f, 0x73, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x2e, 0x52, 0x65, 0x61, 0x6c, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x44, 0x61, 0x74,
	0x61, 0x42, 0x72, 0x65, 0x77, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x04, 0x52, 0x0e, 0x67,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x55, 0x73, 0x69, 0x6e, 0x67, 0x88, 0x01, 0x01,
	0x12, 0x4e, 0x0a, 0x0d, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x41, 0x72, 0x67,
	0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x64, 0x62, 0x70, 0x5f, 0x73, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x2e, 0x52, 0x65, 0x61, 0x6c, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x44, 0x61,
	0x74, 0x61, 0x42, 0x72, 0x65, 0x77, 0x69, 0x6e, 0x67, 0x41, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x0d, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x41, 0x72, 0x67, 0x73,
	0x12, 0x54, 0x0a, 0x0e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e,
	0x66, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x64, 0x62, 0x70, 0x5f, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x52, 0x65, 0x61, 0x6c, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x44,
	0x61, 0x74, 0x61, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66,
	0x6f, 0x48, 0x05, 0x52, 0x0e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x6e, 0x66, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x48, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x64,
	0x62, 0x70, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x52, 0x65, 0x61, 0x6c, 0x57, 0x6f,
	0x72, 0x6c, 0x64, 0x44, 0x61, 0x74, 0x61, 0x53, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x0c, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x1b, 0x0a, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x06, 0x52, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a,
	0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x41, 0x0a, 0x0b,
	0x64, 0x61, 0x74, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x08, 0x52,
	0x0b, 0x64, 0x61, 0x74, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x43, 0x0a, 0x0c, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x48, 0x09, 0x52, 0x0c, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x45, 0x0a, 0x0d, 0x64, 0x61, 0x74, 0x65, 0x50, 0x75, 0x62, 0x6c,
	0x69, 0x73, 0x68, 0x65, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x0a, 0x52, 0x0d, 0x64, 0x61, 0x74, 0x65, 0x50,
	0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x6c,
	0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0b, 0x52, 0x07,
	0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x0f, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x0c, 0x52, 0x0f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0d,
	0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01,
	0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x42, 0x06, 0x0a, 0x04, 0x5f, 0x75, 0x72, 0x6c, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x67,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x55, 0x73, 0x69, 0x6e, 0x67, 0x42, 0x11, 0x0a,
	0x0f, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f,
	0x42, 0x09, 0x0a, 0x07, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x42, 0x12, 0x0a, 0x10, 0x5f,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42,
	0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42,
	0x0f, 0x0a, 0x0d, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68,
	0x65, 0x64, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x42, 0x12,
	0x0a, 0x10, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0xea, 0x02, 0x0a, 0x18, 0x52, 0x65, 0x61, 0x6c, 0x57, 0x6f, 0x72, 0x6c, 0x64,
	0x44, 0x61, 0x74, 0x61, 0x42, 0x72, 0x65, 0x77, 0x65, 0x72, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12,
	0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x02, 0x69,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a,
	0x03, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x03, 0x75, 0x72,
	0x6c, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x03, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x69,
	0x6e, 0x70, 0x75, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04,
	0x52, 0x09, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x19,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x05, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x88, 0x01, 0x01, 0x12, 0x64, 0x0a, 0x13, 0x69, 0x6e, 0x70,
	0x75, 0x74, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x64, 0x62, 0x70, 0x5f, 0x73, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x68, 0x61, 0x72,
	0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x73, 0x74, 0x69, 0x63, 0x45, 0x6e, 0x75, 0x6d, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x06, 0x52, 0x13, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x68,
	0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x73, 0x74, 0x69, 0x63, 0x88, 0x01, 0x01, 0x42,
	0x05, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42,
	0x06, 0x0a, 0x04, 0x5f, 0x75, 0x72, 0x6c, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x6b, 0x65, 0x79, 0x42,
	0x0c, 0x0a, 0x0a, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x54, 0x79, 0x70, 0x65, 0x42, 0x08, 0x0a,
	0x06, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x69, 0x6e, 0x70, 0x75,
	0x74, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x73, 0x74, 0x69, 0x63, 0x22,
	0xf1, 0x02, 0x0a, 0x19, 0x52, 0x65, 0x61, 0x6c, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x44, 0x61, 0x74,
	0x61, 0x42, 0x72, 0x65, 0x77, 0x65, 0x72, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x13, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x75,
	0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x88,
	0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x03, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a, 0x6f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52,
	0x0a, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x19,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x05, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x88, 0x01, 0x01, 0x12, 0x66, 0x0a, 0x14, 0x6f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x64, 0x62, 0x70, 0x5f, 0x73, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x68, 0x61,
	0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x73, 0x74, 0x69, 0x63, 0x45, 0x6e, 0x75, 0x6d, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x06, 0x52, 0x14, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x73, 0x74, 0x69, 0x63, 0x88, 0x01,
	0x01, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x75, 0x72, 0x6c, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x6b, 0x65,
	0x79, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x42, 0x08, 0x0a, 0x06, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x6f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x22, 0xf9, 0x01, 0x0a, 0x1c, 0x52, 0x65, 0x61, 0x6c, 0x57, 0x6f, 0x72, 0x6c,
	0x64, 0x44, 0x61, 0x74, 0x61, 0x42, 0x72, 0x65, 0x77, 0x69, 0x6e, 0x67, 0x41, 0x72, 0x67, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x02, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x88, 0x01, 0x01,
	0x12, 0x27, 0x0a, 0x0c, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x0c, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x88, 0x01, 0x01, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x42, 0x07, 0x0a, 0x05, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x75, 0x72, 0x6c, 0x42, 0x06, 0x0a, 0x04,
	0x5f, 0x6b, 0x65, 0x79, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22,
	0xda, 0x03, 0x0a, 0x17, 0x52, 0x65, 0x61, 0x6c, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x44, 0x61, 0x74,
	0x61, 0x42, 0x72, 0x65, 0x77, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x13, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x75, 0x72, 0x6c,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x88, 0x01, 0x01,
	0x12, 0x44, 0x0a, 0x0a, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x53, 0x70, 0x65, 0x63, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x64, 0x62, 0x70, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x2e, 0x52, 0x65, 0x61, 0x6c, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x44, 0x61, 0x74, 0x61, 0x42,
	0x72, 0x65, 0x77, 0x65, 0x72, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x0a, 0x69, 0x6e, 0x70, 0x75,
	0x74, 0x53, 0x70, 0x65, 0x63, 0x73, 0x12, 0x47, 0x0a, 0x0b, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x53, 0x70, 0x65, 0x63, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x64, 0x62,
	0x70, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x52, 0x65, 0x61, 0x6c, 0x57, 0x6f, 0x72,
	0x6c, 0x64, 0x44, 0x61, 0x74, 0x61, 0x42, 0x72, 0x65, 0x77, 0x65, 0x72, 0x4f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x52, 0x0b, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x53, 0x70, 0x65, 0x63, 0x73, 0x12,
	0x44, 0x0a, 0x08, 0x61, 0x72, 0x67, 0x53, 0x70, 0x65, 0x63, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x64, 0x62, 0x70, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x52,
	0x65, 0x61, 0x6c, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x44, 0x61, 0x74, 0x61, 0x42, 0x72, 0x65, 0x77,
	0x69, 0x6e, 0x67, 0x41, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x08, 0x61, 0x72, 0x67,
	0x53, 0x70, 0x65, 0x63, 0x73, 0x12, 0x70, 0x0a, 0x18, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x64, 0x62, 0x70, 0x5f, 0x73, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x43,
	0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x73, 0x74, 0x69, 0x63, 0x45, 0x6e, 0x75,
	0x6d, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x03, 0x52, 0x18, 0x63, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x88, 0x01, 0x01, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x42, 0x07,
	0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x75, 0x72, 0x6c, 0x42,
	0x1b, 0x0a, 0x19, 0x5f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x68,
	0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x73, 0x74, 0x69, 0x63, 0x22, 0xcf, 0x03, 0x0a,
	0x1b, 0x52, 0x65, 0x61, 0x6c, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x44, 0x61, 0x74, 0x61, 0x43, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x13, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x75, 0x72,
	0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x88, 0x01,
	0x01, 0x12, 0x2d, 0x0a, 0x0f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x79, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x0f, 0x63, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x33, 0x0a, 0x12, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x12,
	0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0d, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x0d,
	0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x88, 0x01, 0x01,
	0x12, 0x29, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x88, 0x01, 0x01, 0x12, 0x3b, 0x0a, 0x0a, 0x65,
	0x6e, 0x74, 0x72, 0x79, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x64, 0x62, 0x70, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x48, 0x07, 0x52, 0x0a, 0x65, 0x6e, 0x74, 0x72, 0x79,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x42,
	0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x75, 0x72, 0x6c,
	0x42, 0x12, 0x0a, 0x10, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x79, 0x6c, 0x65, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x42, 0x10, 0x0a, 0x0e, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x10, 0x0a,
	0x0e, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42,
	0x0d, 0x0a, 0x0b, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x22, 0xea,
	0x07, 0x0a, 0x0a, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x31, 0x0a,
	0x11, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x11, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01,
	0x12, 0x2b, 0x0a, 0x0e, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0e, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a,
	0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x02, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0c, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x0c, 0x65, 0x6e,
	0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a,
	0x0a, 0x68, 0x74, 0x74, 0x70, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x04, 0x52, 0x0a, 0x68, 0x74, 0x74, 0x70, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x75, 0x72, 0x6c, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x0b, 0x75, 0x72, 0x6c, 0x54, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0e, 0x61, 0x64, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x06, 0x52, 0x0e, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x54,
	0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0d, 0x61, 0x6c, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52,
	0x0d, 0x61, 0x6c, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x25, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x41, 0x0a, 0x19, 0x64, 0x69, 0x73, 0x61,
	0x6d, 0x62, 0x69, 0x67, 0x75, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x09, 0x52, 0x19, 0x64,
	0x69, 0x73, 0x61, 0x6d, 0x62, 0x69, 0x67, 0x75, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x13, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0a, 0x52, 0x02, 0x69, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x19, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x0b, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x10, 0x6d,
	0x61, 0x69, 0x6e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4f, 0x66, 0x50, 0x61, 0x67, 0x65, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0c, 0x52, 0x10, 0x6d, 0x61, 0x69, 0x6e, 0x45, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x4f, 0x66, 0x50, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0d, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x0f, 0x70, 0x6f, 0x74, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0e,
	0x52, 0x0f, 0x70, 0x6f, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x73, 0x61, 0x6d, 0x65, 0x41, 0x73, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x0f, 0x52, 0x06, 0x73, 0x61, 0x6d, 0x65, 0x41, 0x73, 0x88, 0x01,
	0x01, 0x12, 0x21, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4f, 0x66, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x10, 0x52, 0x09, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4f,
	0x66, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x11, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x88, 0x01, 0x01, 0x42, 0x14, 0x0a, 0x12, 0x5f,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e,
	0x67, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x68, 0x74, 0x74, 0x70, 0x4d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x75, 0x72, 0x6c, 0x54, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x61, 0x6c, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x1c, 0x0a, 0x1a, 0x5f, 0x64, 0x69,
	0x73, 0x61, 0x6d, 0x62, 0x69, 0x67, 0x75, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x42, 0x08,
	0x0a, 0x06, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x6d, 0x61, 0x69,
	0x6e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4f, 0x66, 0x50, 0x61, 0x67, 0x65, 0x42, 0x07, 0x0a,
	0x05, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x70, 0x6f, 0x74, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73,
	0x61, 0x6d, 0x65, 0x41, 0x73, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x4f, 0x66, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x75, 0x72, 0x6c, 0x22, 0x80, 0x05, 0x0a, 0x05,
	0x54, 0x68, 0x69, 0x6e, 0x67, 0x12, 0x2b, 0x0a, 0x0e, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x0e, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x29, 0x0a, 0x0d, 0x61, 0x6c, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0d, 0x61, 0x6c, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x02, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x88, 0x01, 0x01, 0x12, 0x41, 0x0a, 0x19, 0x64, 0x69, 0x73, 0x61, 0x6d, 0x62, 0x69, 0x67,
	0x75, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x19, 0x64, 0x69, 0x73, 0x61, 0x6d,
	0x62, 0x69, 0x67, 0x75, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x02, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x05, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x10, 0x6d, 0x61, 0x69, 0x6e, 0x45,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x4f, 0x66, 0x50, 0x61, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x06, 0x52, 0x10, 0x6d, 0x61, 0x69, 0x6e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4f,
	0x66, 0x50, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x2d, 0x0a, 0x0f, 0x70, 0x6f, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x0f, 0x70, 0x6f,
	0x74, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01,
	0x12, 0x1b, 0x0a, 0x06, 0x73, 0x61, 0x6d, 0x65, 0x41, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x09, 0x52, 0x06, 0x73, 0x61, 0x6d, 0x65, 0x41, 0x73, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a,
	0x09, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4f, 0x66, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x0a, 0x52, 0x09, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4f, 0x66, 0x88, 0x01, 0x01,
	0x12, 0x15, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0b, 0x52,
	0x03, 0x75, 0x72, 0x6c, 0x88, 0x01, 0x01, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x61, 0x64, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x61,
	0x6c, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c,
	0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x1c, 0x0a, 0x1a,
	0x5f, 0x64, 0x69, 0x73, 0x61, 0x6d, 0x62, 0x69, 0x67, 0x75, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69,
	0x64, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x42, 0x13, 0x0a, 0x11, 0x5f,
	0x6d, 0x61, 0x69, 0x6e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4f, 0x66, 0x50, 0x61, 0x67, 0x65,
	0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x70, 0x6f,
	0x74, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x09, 0x0a,
	0x07, 0x5f, 0x73, 0x61, 0x6d, 0x65, 0x41, 0x73, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x73, 0x75, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x4f, 0x66, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x75, 0x72, 0x6c, 0x22, 0x18,
	0x0a, 0x16, 0x52, 0x65, 0x61, 0x6c, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x44, 0x61, 0x74, 0x61, 0x42,
	0x72, 0x65, 0x77, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x22, 0xc0, 0x02, 0x0a, 0x1a, 0x52, 0x65, 0x61,
	0x6c, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x44, 0x61, 0x74, 0x61, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x75, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x02, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0e,
	0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x0e, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67,
	0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x88, 0x01, 0x01, 0x12, 0x3a, 0x0a, 0x09, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x48, 0x04, 0x52, 0x09, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0d, 0x67, 0x72, 0x61, 0x70, 0x68, 0x71, 0x6c,
	0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x0d,
	0x67, 0x72, 0x61, 0x70, 0x68, 0x71, 0x6c, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x88, 0x01, 0x01,
	0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x42, 0x06, 0x0a, 0x04, 0x5f, 0x75, 0x72, 0x6c, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x65, 0x6e, 0x63,
	0x6f, 0x64, 0x69, 0x6e, 0x67, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x5f,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x67, 0x72,
	0x61, 0x70, 0x68, 0x71, 0x6c, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x22, 0xe1, 0x02, 0x0a, 0x18,
	0x52, 0x65, 0x61, 0x6c, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x44, 0x61, 0x74, 0x61, 0x53, 0x74, 0x6f,
	0x72, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x3d, 0x0a,
	0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x03, 0x52, 0x09,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x07,
	0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x04, 0x52, 0x07, 0x65, 0x6e, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x62, 0x61, 0x73, 0x65, 0x55,
	0x72, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x07, 0x62, 0x61, 0x73, 0x65,
	0x55, 0x72, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72,
	0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x07, 0x70, 0x61, 0x74, 0x74, 0x65,
	0x72, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x42, 0x07, 0x0a, 0x05,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x75, 0x72, 0x6c, 0x42, 0x0c, 0x0a,
	0x0a, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f,
	0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x62, 0x61, 0x73, 0x65,
	0x55, 0x72, 0x6c, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x22,
	0xc3, 0x01, 0x0a, 0x1b, 0x52, 0x65, 0x61, 0x6c, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x44, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x12,
	0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x02, 0x69,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a,
	0x03, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x03, 0x75, 0x72,
	0x6c, 0x88, 0x01, 0x01, 0x12, 0x3b, 0x0a, 0x07, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x64, 0x62, 0x70, 0x5f, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x2e, 0x52, 0x65, 0x61, 0x6c, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x44, 0x61, 0x74, 0x61,
	0x73, 0x65, 0x74, 0x48, 0x03, 0x52, 0x07, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x88, 0x01,
	0x01, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x75, 0x72, 0x6c, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x64, 0x61,
	0x74, 0x61, 0x73, 0x65, 0x74, 0x22, 0xeb, 0x01, 0x0a, 0x1b, 0x52, 0x65, 0x61, 0x6c, 0x57, 0x6f,
	0x72, 0x6c, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x53,
	0x75, 0x70, 0x70, 0x6c, 0x79, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x02, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x3b, 0x0a, 0x07, 0x64, 0x61,
	0x74, 0x61, 0x73, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x64, 0x62,
	0x70, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x52, 0x65, 0x61, 0x6c, 0x57, 0x6f, 0x72,
	0x6c, 0x64, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x48, 0x03, 0x52, 0x07, 0x64, 0x61, 0x74,
	0x61, 0x73, 0x65, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x88, 0x01, 0x01, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x42, 0x07, 0x0a, 0x05, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x75, 0x72, 0x6c, 0x42, 0x0a, 0x0a, 0x08,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x22, 0xe5, 0x01, 0x0a, 0x1d, 0x52, 0x65, 0x61, 0x6c, 0x57, 0x6f, 0x72, 0x6c,
	0x64, 0x44, 0x61, 0x74, 0x61, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44,
	0x65, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x02, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x54, 0x0a, 0x0e, 0x63, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x64, 0x62, 0x70, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e,
	0x52, 0x65, 0x61, 0x6c, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x44, 0x61, 0x74, 0x61, 0x43, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x03, 0x52, 0x0e, 0x63,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x88, 0x01, 0x01,
	0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x42, 0x06, 0x0a, 0x04, 0x5f, 0x75, 0x72, 0x6c, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x63, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x8d, 0x02, 0x0a, 0x1d,
	0x52, 0x65, 0x61, 0x6c, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x44, 0x61, 0x74, 0x61, 0x43, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x12, 0x13, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x75,
	0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x88,
	0x01, 0x01, 0x12, 0x54, 0x0a, 0x0e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x64, 0x62, 0x70,
	0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x52, 0x65, 0x61, 0x6c, 0x57, 0x6f, 0x72, 0x6c,
	0x64, 0x44, 0x61, 0x74, 0x61, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x6e, 0x66, 0x6f, 0x48, 0x03, 0x52, 0x0e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x88, 0x01, 0x01, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x42, 0x07, 0x0a, 0x05,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x75, 0x72, 0x6c, 0x42, 0x11, 0x0a,
	0x0f, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f,
	0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xc5, 0x03, 0x0a, 0x1d,
	0x52, 0x65, 0x61, 0x6c, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x44, 0x61, 0x74, 0x61, 0x43, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x13, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x75,
	0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x88,
	0x01, 0x01, 0x12, 0x54, 0x0a, 0x0e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x64, 0x62, 0x70,
	0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x52, 0x65, 0x61, 0x6c, 0x57, 0x6f, 0x72, 0x6c,
	0x64, 0x44, 0x61, 0x74, 0x61, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x6e, 0x66, 0x6f, 0x48, 0x03, 0x52, 0x0e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x37, 0x0a, 0x14, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x14, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x45, 0x0a, 0x11, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x11, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x45, 0x0a, 0x11, 0x74, 0x72, 0x61, 0x66,
	0x66, 0x69, 0x63, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x07, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x11, 0x74, 0x72,
	0x61, 0x66, 0x66, 0x69, 0x63, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x42,
	0x05, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42,
	0x06, 0x0a, 0x04, 0x5f, 0x75, 0x72, 0x6c, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x63, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x22, 0xc2, 0x03, 0x0a, 0x1a, 0x52, 0x65, 0x61, 0x6c, 0x57, 0x6f, 0x72, 0x6c,
	0x64, 0x44, 0x61, 0x74, 0x61, 0x42, 0x72, 0x65, 0x77, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x6d, 0x61,
	0x6e, 0x64, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x02, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x15, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52,
	0x03, 0x75, 0x72, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x48, 0x0a, 0x0a, 0x62, 0x72, 0x65, 0x77, 0x65,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x64, 0x62,
	0x70, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x52, 0x65, 0x61, 0x6c, 0x57, 0x6f, 0x72,
	0x6c, 0x64, 0x44, 0x61, 0x74, 0x61, 0x42, 0x72, 0x65, 0x77, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x48, 0x03, 0x52, 0x0a, 0x62, 0x72, 0x65, 0x77, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x88, 0x01,
	0x01, 0x12, 0x46, 0x0a, 0x0b, 0x62, 0x72, 0x65, 0x77, 0x65, 0x72, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x64, 0x62, 0x70, 0x5f, 0x73, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x2e, 0x52, 0x65, 0x61, 0x6c, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x44, 0x61, 0x74,
	0x61, 0x42, 0x72, 0x65, 0x77, 0x65, 0x72, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x0b, 0x62, 0x72,
	0x65, 0x77, 0x65, 0x72, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x52, 0x0a, 0x0f, 0x62, 0x72, 0x65,
	0x77, 0x69, 0x6e, 0x67, 0x41, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x64, 0x62, 0x70, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e,
	0x52, 0x65, 0x61, 0x6c, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x44, 0x61, 0x74, 0x61, 0x42, 0x72, 0x65,
	0x77, 0x69, 0x6e, 0x67, 0x41, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0f, 0x62, 0x72,
	0x65, 0x77, 0x69, 0x6e, 0x67, 0x41, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x52, 0x0a,
	0x11, 0x62, 0x72, 0x65, 0x77, 0x65, 0x72, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x53, 0x74, 0x6f,
	0x72, 0x65, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x64, 0x62, 0x70, 0x5f, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x52, 0x65, 0x61, 0x6c, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x44,
	0x61, 0x74, 0x61, 0x53, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x11,
	0x62, 0x72, 0x65, 0x77, 0x65, 0x72, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x53, 0x74, 0x6f, 0x72,
	0x65, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x75, 0x72, 0x6c, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x62, 0x72,
	0x65, 0x77, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xf1, 0x02, 0x0a, 0x1a, 0x52, 0x65, 0x61,
	0x6c, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x44, 0x61, 0x74, 0x61, 0x42, 0x72, 0x65, 0x77, 0x69, 0x6e,
	0x67, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x02, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x48, 0x0a, 0x0a,
	0x62, 0x72, 0x65, 0x77, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x64, 0x62, 0x70, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x52, 0x65,
	0x61, 0x6c, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x44, 0x61, 0x74, 0x61, 0x42, 0x72, 0x65, 0x77, 0x65,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x03, 0x52, 0x0a, 0x62, 0x72, 0x65, 0x77, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x49, 0x0a, 0x0c, 0x62, 0x72, 0x65, 0x77, 0x65, 0x72,
	0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x64,
	0x62, 0x70, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x52, 0x65, 0x61, 0x6c, 0x57, 0x6f,
	0x72, 0x6c, 0x64, 0x44, 0x61, 0x74, 0x61, 0x42, 0x72, 0x65, 0x77, 0x65, 0x72, 0x4f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x52, 0x0c, 0x62, 0x72, 0x65, 0x77, 0x65, 0x72, 0x4f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x12, 0x52, 0x0a, 0x0f, 0x62, 0x72, 0x65, 0x77, 0x69, 0x6e, 0x67, 0x41, 0x72, 0x67, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x64, 0x62, 0x70,
	0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x52, 0x65, 0x61, 0x6c, 0x57, 0x6f, 0x72, 0x6c,
	0x64, 0x44, 0x61, 0x74, 0x61, 0x42, 0x72, 0x65, 0x77, 0x69, 0x6e, 0x67, 0x41, 0x72, 0x67, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0f, 0x62, 0x72, 0x65, 0x77, 0x69, 0x6e, 0x67, 0x41, 0x72, 0x67,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x42, 0x07, 0x0a, 0x05,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x75, 0x72, 0x6c, 0x42, 0x0d, 0x0a,
	0x0b, 0x5f, 0x62, 0x72, 0x65, 0x77, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x9a, 0x02, 0x0a,
	0x22, 0x52, 0x65, 0x61, 0x6c, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x44, 0x61, 0x74, 0x61, 0x50, 0x65,
	0x72, 0x69, 0x6f, 0x64, 0x69, 0x63, 0x42, 0x72, 0x65, 0x77, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x02, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x15, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02,
	0x52, 0x03, 0x75, 0x72, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x51, 0x0a, 0x0d, 0x62, 0x72, 0x65, 0x77,
	0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x64, 0x62, 0x70, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x52, 0x65, 0x61,
	0x6c, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x44, 0x61, 0x74, 0x61, 0x42, 0x72, 0x65, 0x77, 0x69, 0x6e,
	0x67, 0x44, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x48, 0x03, 0x52, 0x0d, 0x62, 0x72, 0x65, 0x77, 0x69,
	0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a, 0x63,
	0x72, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x04, 0x52, 0x0a, 0x63, 0x72, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x88, 0x01, 0x01,
	0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x42, 0x06, 0x0a, 0x04, 0x5f, 0x75, 0x72, 0x6c, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x62, 0x72, 0x65,
	0x77, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x63,
	0x72, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0xf0, 0x02, 0x0a, 0x17, 0x52, 0x65,
	0x61, 0x6c, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x61, 0x64, 0x44,
	0x65, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x02, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x3b, 0x0a, 0x07, 0x64, 0x61,
	0x74, 0x61, 0x73, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x64, 0x62,
	0x70, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x52, 0x65, 0x61, 0x6c, 0x57, 0x6f, 0x72,
	0x6c, 0x64, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x48, 0x03, 0x52, 0x07, 0x64, 0x61, 0x74,
	0x61, 0x73, 0x65, 0x74, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0c, 0x67, 0x72, 0x61, 0x70, 0x68,
	0x71, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52,
	0x0c, 0x67, 0x72, 0x61, 0x70, 0x68, 0x71, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x88, 0x01, 0x01,
	0x12, 0x2b, 0x0a, 0x0e, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x0e, 0x74, 0x69, 0x6d, 0x65,
	0x72, 0x61, 0x6e, 0x67, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a,
	0x0b, 0x73, 0x70, 0x61, 0x72, 0x71, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x06, 0x52, 0x0b, 0x73, 0x70, 0x61, 0x72, 0x71, 0x6c, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x88, 0x01, 0x01, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x42, 0x07, 0x0a, 0x05, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x75, 0x72, 0x6c, 0x42, 0x0a, 0x0a, 0x08,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x67, 0x72, 0x61,
	0x70, 0x68, 0x71, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x42, 0x0e, 0x0a, 0x0c,
	0x5f, 0x73, 0x70, 0x61, 0x72, 0x71, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x22, 0x92, 0x03, 0x0a,
	0x17, 0x52, 0x65, 0x61, 0x6c, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65,
	0x61, 0x64, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x3b, 0x0a,
	0x07, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x64, 0x62, 0x70, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x52, 0x65, 0x61, 0x6c,
	0x57, 0x6f, 0x72, 0x6c, 0x64, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x48, 0x03, 0x52, 0x07,
	0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0c, 0x67, 0x72,
	0x61, 0x70, 0x68, 0x71, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x04, 0x52, 0x0c, 0x67, 0x72, 0x61, 0x70, 0x68, 0x71, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0e, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x61, 0x6e, 0x67, 0x65,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x0e, 0x74,
	0x69, 0x6d, 0x65, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x88, 0x01, 0x01,
	0x12, 0x25, 0x0a, 0x0b, 0x73, 0x70, 0x61, 0x72, 0x71, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x0b, 0x73, 0x70, 0x61, 0x72, 0x71, 0x6c, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x07, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x88, 0x01, 0x01,
	0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x42, 0x06, 0x0a, 0x04, 0x5f, 0x75, 0x72, 0x6c, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x73, 0x65, 0x74, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x71, 0x6c,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x61,
	0x6e, 0x67, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x73, 0x70, 0x61,
	0x72, 0x71, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x22, 0xe2, 0x02, 0x0a, 0x18, 0x52, 0x65, 0x61, 0x6c, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x44,
	0x61, 0x74, 0x61, 0x57, 0x72, 0x69, 0x74, 0x65, 0x44, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x13,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03,
	0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x03, 0x75, 0x72, 0x6c,
	0x88, 0x01, 0x01, 0x12, 0x3b, 0x0a, 0x07, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x64, 0x62, 0x70, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x2e, 0x52, 0x65, 0x61, 0x6c, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x44, 0x61, 0x74, 0x61, 0x73,
	0x65, 0x74, 0x48, 0x03, 0x52, 0x07, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x88, 0x01, 0x01,
	0x12, 0x2d, 0x0a, 0x0f, 0x74, 0x69, 0x6d, 0x65, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x0f, 0x74, 0x69, 0x6d,
	0x65, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x29, 0x0a, 0x0d, 0x74, 0x69, 0x6d, 0x65, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x45, 0x6e, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x0d, 0x74, 0x69, 0x6d, 0x65, 0x50, 0x65,
	0x72, 0x69, 0x6f, 0x64, 0x45, 0x6e, 0x64, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x06, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x88, 0x01, 0x01, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x75, 0x72, 0x6c, 0x42, 0x0a, 0x0a, 0x08, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x42, 0x10, 0x0a, 0x0e, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x45, 0x6e, 0x64, 0x42, 0x07, 0x0a,
	0x05, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x22, 0xc0, 0x02, 0x0a, 0x18, 0x52, 0x65, 0x61, 0x6c, 0x57,
	0x6f, 0x72, 0x6c, 0x64, 0x44, 0x61, 0x74, 0x61, 0x57, 0x72, 0x69, 0x74, 0x65, 0x53, 0x75, 0x70,
	0x70, 0x6c, 0x79, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x02, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x15, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02,
	0x52, 0x03, 0x75, 0x72, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x3b, 0x0a, 0x07, 0x64, 0x61, 0x74, 0x61,
	0x73, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x64, 0x62, 0x70, 0x5f,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x52, 0x65, 0x61, 0x6c, 0x57, 0x6f, 0x72, 0x6c, 0x64,
	0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x48, 0x03, 0x52, 0x07, 0x64, 0x61, 0x74, 0x61, 0x73,
	0x65, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x0f, 0x74, 0x69, 0x6d, 0x65, 0x50, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04,
	0x52, 0x0f, 0x74, 0x69, 0x6d, 0x65, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0d, 0x74, 0x69, 0x6d, 0x65, 0x50, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x45, 0x6e, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x0d, 0x74,
	0x69, 0x6d, 0x65, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x45, 0x6e, 0x64, 0x88, 0x01, 0x01, 0x42,
	0x05, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42,
	0x06, 0x0a, 0x04, 0x5f, 0x75, 0x72, 0x6c, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x73, 0x65, 0x74, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x50, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x45, 0x6e, 0x64, 0x22, 0x97, 0x04, 0x0a, 0x17, 0x52, 0x65,
	0x61, 0x6c, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x6f, 0x76, 0x65, 0x44,
	0x65, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x02, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x47, 0x0a, 0x0d, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x64, 0x62, 0x70, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x52,
	0x65, 0x61, 0x6c, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x48,
	0x03, 0x52, 0x0d, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74,
	0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x15, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x04, 0x52, 0x15, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x88, 0x01, 0x01, 0x12, 0x35,
	0x0a, 0x13, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x50, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x45, 0x6e, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x13, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x45,
	0x6e, 0x64, 0x88, 0x01, 0x01, 0x12, 0x45, 0x0a, 0x08, 0x6d, 0x6f, 0x76, 0x65, 0x46, 0x72, 0x6f,
	0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x64, 0x62, 0x70, 0x5f, 0x73, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x2e, 0x52, 0x65, 0x61, 0x6c, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x44, 0x61,
	0x74, 0x61, 0x53, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x06, 0x52,
	0x08, 0x6d, 0x6f, 0x76, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x41, 0x0a, 0x06,
	0x6d, 0x6f, 0x76, 0x65, 0x54, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x64,
	0x62, 0x70, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x52, 0x65, 0x61, 0x6c, 0x57, 0x6f,
	0x72, 0x6c, 0x64, 0x44, 0x61, 0x74, 0x61, 0x53, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x49, 0x6e,
	0x66, 0x6f, 0x48, 0x07, 0x52, 0x06, 0x6d, 0x6f, 0x76, 0x65, 0x54, 0x6f, 0x88, 0x01, 0x01, 0x42,
	0x05, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42,
	0x06, 0x0a, 0x04, 0x5f, 0x75, 0x72, 0x6c, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x45, 0x6e, 0x64, 0x42, 0x0b, 0x0a, 0x09, 0x5f,
	0x6d, 0x6f, 0x76, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x6d, 0x6f, 0x76,
	0x65, 0x54, 0x6f, 0x22, 0xef, 0x04, 0x0a, 0x17, 0x52, 0x65, 0x61, 0x6c, 0x57, 0x6f, 0x72, 0x6c,
	0x64, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x6f, 0x76, 0x65, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x12,
	0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x02, 0x69,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a,
	0x03, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x03, 0x75, 0x72,
	0x6c, 0x88, 0x01, 0x01, 0x12, 0x47, 0x0a, 0x0d, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x73, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x64, 0x62,
	0x70, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x52, 0x65, 0x61, 0x6c, 0x57, 0x6f, 0x72,
	0x6c, 0x64, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x48, 0x03, 0x52, 0x0d, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x88, 0x01, 0x01, 0x12, 0x39, 0x0a,
	0x15, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x50, 0x65, 0x72, 0x69, 0x6f,
	0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x15,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x13, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x45, 0x6e, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x13, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x45, 0x6e, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x45, 0x0a, 0x08, 0x6d, 0x6f, 0x76, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x64, 0x62, 0x70, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x52,
	0x65, 0x61, 0x6c, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x44, 0x61, 0x74, 0x61, 0x53, 0x74, 0x6f, 0x72,
	0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x06, 0x52, 0x08, 0x6d, 0x6f, 0x76, 0x65, 0x46,
	0x72, 0x6f, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x41, 0x0a, 0x06, 0x6d, 0x6f, 0x76, 0x65, 0x54, 0x6f,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x64, 0x62, 0x70, 0x5f, 0x73, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x2e, 0x52, 0x65, 0x61, 0x6c, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x44, 0x61, 0x74,
	0x61, 0x53, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x07, 0x52, 0x06,
	0x6d, 0x6f, 0x76, 0x65, 0x54, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x45, 0x0a, 0x0c, 0x6d, 0x6f, 0x76,
	0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x64, 0x62, 0x70, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x52, 0x65, 0x61,
	0x6c, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x48, 0x08, 0x52,
	0x0c, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x88, 0x01, 0x01,
	0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x42, 0x06, 0x0a, 0x04, 0x5f, 0x75, 0x72, 0x6c, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x45, 0x6e, 0x64, 0x42, 0x0b, 0x0a, 0x09,
	0x5f, 0x6d, 0x6f, 0x76, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x6d, 0x6f,
	0x76, 0x65, 0x54, 0x6f, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x44, 0x61,
	0x74, 0x61, 0x73, 0x65, 0x74, 0x22, 0x8b, 0x02, 0x0a, 0x1f, 0x52, 0x65, 0x61, 0x6c, 0x57, 0x6f,
	0x72, 0x6c, 0x64, 0x44, 0x61, 0x74, 0x61, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x69, 0x63, 0x4d,
	0x6f, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x17,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x48,
	0x0a, 0x0a, 0x6d, 0x6f, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x64, 0x62, 0x70, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e,
	0x52, 0x65, 0x61, 0x6c, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x6f, 0x76,
	0x65, 0x44, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x48, 0x03, 0x52, 0x0a, 0x6d, 0x6f, 0x76, 0x65, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a, 0x63, 0x72, 0x6f, 0x6e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x0a,
	0x63, 0x72, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x88, 0x01, 0x01, 0x42, 0x05, 0x0a,
	0x03, 0x5f, 0x69, 0x64, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x06, 0x0a,
	0x04, 0x5f, 0x75, 0x72, 0x6c, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6d, 0x6f, 0x76, 0x65, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x63, 0x72, 0x6f, 0x6e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x22, 0xe5, 0x02, 0x0a, 0x19, 0x52, 0x65, 0x61, 0x6c, 0x57, 0x6f, 0x72, 0x6c,
	0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x44, 0x65, 0x6d, 0x61, 0x6e,
	0x64, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x02, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x15, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x03,
	0x75, 0x72, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x3b, 0x0a, 0x07, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x64, 0x62, 0x70, 0x5f, 0x73, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x2e, 0x52, 0x65, 0x61, 0x6c, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x44, 0x61,
	0x74, 0x61, 0x73, 0x65, 0x74, 0x48, 0x03, 0x52, 0x07, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74,
	0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x15, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x04, 0x52, 0x15, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x88, 0x01, 0x01, 0x12, 0x35,
	0x0a, 0x13, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x50, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x45, 0x6e, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x13, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x45,
	0x6e, 0x64, 0x88, 0x01, 0x01, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x42, 0x07, 0x0a, 0x05,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x75, 0x72, 0x6c, 0x42, 0x0a, 0x0a,
	0x08, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x45, 0x6e, 0x64, 0x22, 0xe5, 0x02, 0x0a, 0x19,
	0x52, 0x65, 0x61, 0x6c, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x17,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x3b,
	0x0a, 0x07, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x64, 0x62, 0x70, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x52, 0x65, 0x61,
	0x6c, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x48, 0x03, 0x52,
	0x07, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x15, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x15, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x13, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x45, 0x6e, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x13, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x45, 0x6e, 0x64, 0x88, 0x01, 0x01, 0x42, 0x05, 0x0a,
	0x03, 0x5f, 0x69, 0x64, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x06, 0x0a,
	0x04, 0x5f, 0x75, 0x72, 0x6c, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65,
	0x74, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x42, 0x16, 0x0a, 0x14, 0x5f,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x45, 0x6e, 0x64, 0x22, 0x95, 0x02, 0x0a, 0x21, 0x52, 0x65, 0x61, 0x6c, 0x57, 0x6f, 0x72, 0x6c,
	0x64, 0x44, 0x61, 0x74, 0x61, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x69, 0x63, 0x52, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x17,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x4e,
	0x0a, 0x0c, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x64, 0x62, 0x70, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x2e, 0x52, 0x65, 0x61, 0x6c, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x44, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x48, 0x03, 0x52, 0x0c, 0x72,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x88, 0x01, 0x01, 0x12, 0x23,
	0x0a, 0x0a, 0x63, 0x72, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x04, 0x52, 0x0a, 0x63, 0x72, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x88, 0x01, 0x01, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x75, 0x72, 0x6c, 0x42, 0x0f, 0x0a, 0x0d, 0x5f,
	0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x0d, 0x0a, 0x0b,
	0x5f, 0x63, 0x72, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2a, 0x5d, 0x0a, 0x23, 0x43,
	0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74,
	0x65, 0x72, 0x69, 0x73, 0x74, 0x69, 0x63, 0x45, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x49, 0x4e, 0x47, 0x4c, 0x45, 0x5f, 0x56, 0x41, 0x4c,
	0x55, 0x45, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x41, 0x43, 0x45, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09,
	0x43, 0x4f, 0x4c, 0x5f, 0x4d, 0x45, 0x52, 0x47, 0x45, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x52,
	0x4f, 0x57, 0x5f, 0x4d, 0x45, 0x52, 0x47, 0x45, 0x10, 0x02, 0x2a, 0x46, 0x0a, 0x21, 0x56, 0x61,
	0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x45, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x0f, 0x0a, 0x0b, 0x51, 0x55, 0x41, 0x4c, 0x49, 0x54, 0x41, 0x54, 0x49, 0x56, 0x45, 0x10, 0x00,
	0x12, 0x10, 0x0a, 0x0c, 0x51, 0x55, 0x41, 0x4e, 0x54, 0x49, 0x54, 0x41, 0x54, 0x49, 0x56, 0x45,
	0x10, 0x01, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_dbp_schema_proto_rawDescOnce sync.Once
	file_dbp_schema_proto_rawDescData = file_dbp_schema_proto_rawDesc
)

func file_dbp_schema_proto_rawDescGZIP() []byte {
	file_dbp_schema_proto_rawDescOnce.Do(func() {
		file_dbp_schema_proto_rawDescData = protoimpl.X.CompressGZIP(file_dbp_schema_proto_rawDescData)
	})
	return file_dbp_schema_proto_rawDescData
}

var file_dbp_schema_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_dbp_schema_proto_msgTypes = make([]protoimpl.MessageInfo, 29)
var file_dbp_schema_proto_goTypes = []interface{}{
	(ConversionCharacteristicEnumeration)(0),   // 0: dbp_schema.ConversionCharacteristicEnumeration
	(VariableCharacteristicEnumeration)(0),     // 1: dbp_schema.VariableCharacteristicEnumeration
	(*RealWorldDataset)(nil),                   // 2: dbp_schema.RealWorldDataset
	(*RealWorldDataBrewerInput)(nil),           // 3: dbp_schema.RealWorldDataBrewerInput
	(*RealWorldDataBrewerOutput)(nil),          // 4: dbp_schema.RealWorldDataBrewerOutput
	(*RealWorldDataBrewingArgument)(nil),       // 5: dbp_schema.RealWorldDataBrewingArgument
	(*RealWorldDataBrewerInfo)(nil),            // 6: dbp_schema.RealWorldDataBrewerInfo
	(*RealWorldDataCollectionInfo)(nil),        // 7: dbp_schema.RealWorldDataCollectionInfo
	(*EntryPoint)(nil),                         // 8: dbp_schema.EntryPoint
	(*Thing)(nil),                              // 9: dbp_schema.Thing
	(*RealWorldDataBrewEvent)(nil),             // 10: dbp_schema.RealWorldDataBrewEvent
	(*RealWorldDataStructureInfo)(nil),         // 11: dbp_schema.RealWorldDataStructureInfo
	(*RealWorldDataStoringInfo)(nil),           // 12: dbp_schema.RealWorldDataStoringInfo
	(*RealWorldDataRegisterDemand)(nil),        // 13: dbp_schema.RealWorldDataRegisterDemand
	(*RealWorldDataRegisterSupply)(nil),        // 14: dbp_schema.RealWorldDataRegisterSupply
	(*RealWorldDataCollectionDemand)(nil),      // 15: dbp_schema.RealWorldDataCollectionDemand
	(*RealWorldDataCollectionSupply)(nil),      // 16: dbp_schema.RealWorldDataCollectionSupply
	(*RealWorldDataCollectionStatus)(nil),      // 17: dbp_schema.RealWorldDataCollectionStatus
	(*RealWorldDataBrewingDemand)(nil),         // 18: dbp_schema.RealWorldDataBrewingDemand
	(*RealWorldDataBrewingSupply)(nil),         // 19: dbp_schema.RealWorldDataBrewingSupply
	(*RealWorldDataPeriodicBrewingConfig)(nil), // 20: dbp_schema.RealWorldDataPeriodicBrewingConfig
	(*RealWorldDataReadDemand)(nil),            // 21: dbp_schema.RealWorldDataReadDemand
	(*RealWorldDataReadSupply)(nil),            // 22: dbp_schema.RealWorldDataReadSupply
	(*RealWorldDataWriteDemand)(nil),           // 23: dbp_schema.RealWorldDataWriteDemand
	(*RealWorldDataWriteSupply)(nil),           // 24: dbp_schema.RealWorldDataWriteSupply
	(*RealWorldDataMoveDemand)(nil),            // 25: dbp_schema.RealWorldDataMoveDemand
	(*RealWorldDataMoveSupply)(nil),            // 26: dbp_schema.RealWorldDataMoveSupply
	(*RealWorldDataPeriodicMoveConfig)(nil),    // 27: dbp_schema.RealWorldDataPeriodicMoveConfig
	(*RealWorldDataRemoveDemand)(nil),          // 28: dbp_schema.RealWorldDataRemoveDemand
	(*RealWorldDataRemoveSupply)(nil),          // 29: dbp_schema.RealWorldDataRemoveSupply
	(*RealWorldDataPeriodicRemoveConfig)(nil),  // 30: dbp_schema.RealWorldDataPeriodicRemoveConfig
	(*timestamp.Timestamp)(nil),                // 31: google.protobuf.Timestamp
	(*_struct.Struct)(nil),                     // 32: google.protobuf.Struct
}
var file_dbp_schema_proto_depIdxs = []int32{
	11, // 0: dbp_schema.RealWorldDataset.structureInfo:type_name -> dbp_schema.RealWorldDataStructureInfo
	2,  // 1: dbp_schema.RealWorldDataset.generatedFrom:type_name -> dbp_schema.RealWorldDataset
	6,  // 2: dbp_schema.RealWorldDataset.generatedUsing:type_name -> dbp_schema.RealWorldDataBrewerInfo
	5,  // 3: dbp_schema.RealWorldDataset.generatedArgs:type_name -> dbp_schema.RealWorldDataBrewingArgument
	7,  // 4: dbp_schema.RealWorldDataset.collectionInfo:type_name -> dbp_schema.RealWorldDataCollectionInfo
	12, // 5: dbp_schema.RealWorldDataset.distribution:type_name -> dbp_schema.RealWorldDataStoringInfo
	31, // 6: dbp_schema.RealWorldDataset.dateCreated:type_name -> google.protobuf.Timestamp
	31, // 7: dbp_schema.RealWorldDataset.dateModified:type_name -> google.protobuf.Timestamp
	31, // 8: dbp_schema.RealWorldDataset.datePublished:type_name -> google.protobuf.Timestamp
	1,  // 9: dbp_schema.RealWorldDataBrewerInput.inputCharacteristic:type_name -> dbp_schema.VariableCharacteristicEnumeration
	1,  // 10: dbp_schema.RealWorldDataBrewerOutput.outputCharacteristic:type_name -> dbp_schema.VariableCharacteristicEnumeration
	3,  // 11: dbp_schema.RealWorldDataBrewerInfo.inputSpecs:type_name -> dbp_schema.RealWorldDataBrewerInput
	4,  // 12: dbp_schema.RealWorldDataBrewerInfo.outputSpecs:type_name -> dbp_schema.RealWorldDataBrewerOutput
	5,  // 13: dbp_schema.RealWorldDataBrewerInfo.argSpecs:type_name -> dbp_schema.RealWorldDataBrewingArgument
	0,  // 14: dbp_schema.RealWorldDataBrewerInfo.conversionCharacteristic:type_name -> dbp_schema.ConversionCharacteristicEnumeration
	8,  // 15: dbp_schema.RealWorldDataCollectionInfo.entryPoint:type_name -> dbp_schema.EntryPoint
	32, // 16: dbp_schema.RealWorldDataStructureInfo.structure:type_name -> google.protobuf.Struct
	31, // 17: dbp_schema.RealWorldDataStoringInfo.startTime:type_name -> google.protobuf.Timestamp
	31, // 18: dbp_schema.RealWorldDataStoringInfo.endTime:type_name -> google.protobuf.Timestamp
	2,  // 19: dbp_schema.RealWorldDataRegisterDemand.dataset:type_name -> dbp_schema.RealWorldDataset
	2,  // 20: dbp_schema.RealWorldDataRegisterSupply.dataset:type_name -> dbp_schema.RealWorldDataset
	7,  // 21: dbp_schema.RealWorldDataCollectionDemand.collectionInfo:type_name -> dbp_schema.RealWorldDataCollectionInfo
	7,  // 22: dbp_schema.RealWorldDataCollectionSupply.collectionInfo:type_name -> dbp_schema.RealWorldDataCollectionInfo
	7,  // 23: dbp_schema.RealWorldDataCollectionStatus.collectionInfo:type_name -> dbp_schema.RealWorldDataCollectionInfo
	32, // 24: dbp_schema.RealWorldDataCollectionStatus.activeConnections:type_name -> google.protobuf.Struct
	32, // 25: dbp_schema.RealWorldDataCollectionStatus.trafficStatistics:type_name -> google.protobuf.Struct
	6,  // 26: dbp_schema.RealWorldDataBrewingDemand.brewerInfo:type_name -> dbp_schema.RealWorldDataBrewerInfo
	3,  // 27: dbp_schema.RealWorldDataBrewingDemand.brewerInput:type_name -> dbp_schema.RealWorldDataBrewerInput
	5,  // 28: dbp_schema.RealWorldDataBrewingDemand.brewingArgument:type_name -> dbp_schema.RealWorldDataBrewingArgument
	12, // 29: dbp_schema.RealWorldDataBrewingDemand.brewerOutputStore:type_name -> dbp_schema.RealWorldDataStoringInfo
	6,  // 30: dbp_schema.RealWorldDataBrewingSupply.brewerInfo:type_name -> dbp_schema.RealWorldDataBrewerInfo
	4,  // 31: dbp_schema.RealWorldDataBrewingSupply.brewerOutput:type_name -> dbp_schema.RealWorldDataBrewerOutput
	5,  // 32: dbp_schema.RealWorldDataBrewingSupply.brewingArgument:type_name -> dbp_schema.RealWorldDataBrewingArgument
	18, // 33: dbp_schema.RealWorldDataPeriodicBrewingConfig.brewingConfig:type_name -> dbp_schema.RealWorldDataBrewingDemand
	2,  // 34: dbp_schema.RealWorldDataReadDemand.dataset:type_name -> dbp_schema.RealWorldDataset
	2,  // 35: dbp_schema.RealWorldDataReadSupply.dataset:type_name -> dbp_schema.RealWorldDataset
	2,  // 36: dbp_schema.RealWorldDataWriteDemand.dataset:type_name -> dbp_schema.RealWorldDataset
	2,  // 37: dbp_schema.RealWorldDataWriteSupply.dataset:type_name -> dbp_schema.RealWorldDataset
	2,  // 38: dbp_schema.RealWorldDataMoveDemand.targetDataset:type_name -> dbp_schema.RealWorldDataset
	12, // 39: dbp_schema.RealWorldDataMoveDemand.moveFrom:type_name -> dbp_schema.RealWorldDataStoringInfo
	12, // 40: dbp_schema.RealWorldDataMoveDemand.moveTo:type_name -> dbp_schema.RealWorldDataStoringInfo
	2,  // 41: dbp_schema.RealWorldDataMoveSupply.targetDataset:type_name -> dbp_schema.RealWorldDataset
	12, // 42: dbp_schema.RealWorldDataMoveSupply.moveFrom:type_name -> dbp_schema.RealWorldDataStoringInfo
	12, // 43: dbp_schema.RealWorldDataMoveSupply.moveTo:type_name -> dbp_schema.RealWorldDataStoringInfo
	2,  // 44: dbp_schema.RealWorldDataMoveSupply.movedDataset:type_name -> dbp_schema.RealWorldDataset
	25, // 45: dbp_schema.RealWorldDataPeriodicMoveConfig.moveConfig:type_name -> dbp_schema.RealWorldDataMoveDemand
	2,  // 46: dbp_schema.RealWorldDataRemoveDemand.dataset:type_name -> dbp_schema.RealWorldDataset
	2,  // 47: dbp_schema.RealWorldDataRemoveSupply.dataset:type_name -> dbp_schema.RealWorldDataset
	28, // 48: dbp_schema.RealWorldDataPeriodicRemoveConfig.removeConfig:type_name -> dbp_schema.RealWorldDataRemoveDemand
	49, // [49:49] is the sub-list for method output_type
	49, // [49:49] is the sub-list for method input_type
	49, // [49:49] is the sub-list for extension type_name
	49, // [49:49] is the sub-list for extension extendee
	0,  // [0:49] is the sub-list for field type_name
}

func init() { file_dbp_schema_proto_init() }
func file_dbp_schema_proto_init() {
	if File_dbp_schema_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_dbp_schema_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RealWorldDataset); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dbp_schema_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RealWorldDataBrewerInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dbp_schema_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RealWorldDataBrewerOutput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dbp_schema_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RealWorldDataBrewingArgument); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dbp_schema_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RealWorldDataBrewerInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dbp_schema_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RealWorldDataCollectionInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dbp_schema_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EntryPoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dbp_schema_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Thing); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dbp_schema_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RealWorldDataBrewEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dbp_schema_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RealWorldDataStructureInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dbp_schema_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RealWorldDataStoringInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dbp_schema_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RealWorldDataRegisterDemand); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dbp_schema_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RealWorldDataRegisterSupply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dbp_schema_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RealWorldDataCollectionDemand); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dbp_schema_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RealWorldDataCollectionSupply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dbp_schema_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RealWorldDataCollectionStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dbp_schema_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RealWorldDataBrewingDemand); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dbp_schema_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RealWorldDataBrewingSupply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dbp_schema_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RealWorldDataPeriodicBrewingConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dbp_schema_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RealWorldDataReadDemand); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dbp_schema_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RealWorldDataReadSupply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dbp_schema_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RealWorldDataWriteDemand); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dbp_schema_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RealWorldDataWriteSupply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dbp_schema_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RealWorldDataMoveDemand); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dbp_schema_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RealWorldDataMoveSupply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dbp_schema_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RealWorldDataPeriodicMoveConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dbp_schema_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RealWorldDataRemoveDemand); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dbp_schema_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RealWorldDataRemoveSupply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dbp_schema_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RealWorldDataPeriodicRemoveConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_dbp_schema_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_dbp_schema_proto_msgTypes[1].OneofWrappers = []interface{}{}
	file_dbp_schema_proto_msgTypes[2].OneofWrappers = []interface{}{}
	file_dbp_schema_proto_msgTypes[3].OneofWrappers = []interface{}{}
	file_dbp_schema_proto_msgTypes[4].OneofWrappers = []interface{}{}
	file_dbp_schema_proto_msgTypes[5].OneofWrappers = []interface{}{}
	file_dbp_schema_proto_msgTypes[6].OneofWrappers = []interface{}{}
	file_dbp_schema_proto_msgTypes[7].OneofWrappers = []interface{}{}
	file_dbp_schema_proto_msgTypes[9].OneofWrappers = []interface{}{}
	file_dbp_schema_proto_msgTypes[10].OneofWrappers = []interface{}{}
	file_dbp_schema_proto_msgTypes[11].OneofWrappers = []interface{}{}
	file_dbp_schema_proto_msgTypes[12].OneofWrappers = []interface{}{}
	file_dbp_schema_proto_msgTypes[13].OneofWrappers = []interface{}{}
	file_dbp_schema_proto_msgTypes[14].OneofWrappers = []interface{}{}
	file_dbp_schema_proto_msgTypes[15].OneofWrappers = []interface{}{}
	file_dbp_schema_proto_msgTypes[16].OneofWrappers = []interface{}{}
	file_dbp_schema_proto_msgTypes[17].OneofWrappers = []interface{}{}
	file_dbp_schema_proto_msgTypes[18].OneofWrappers = []interface{}{}
	file_dbp_schema_proto_msgTypes[19].OneofWrappers = []interface{}{}
	file_dbp_schema_proto_msgTypes[20].OneofWrappers = []interface{}{}
	file_dbp_schema_proto_msgTypes[21].OneofWrappers = []interface{}{}
	file_dbp_schema_proto_msgTypes[22].OneofWrappers = []interface{}{}
	file_dbp_schema_proto_msgTypes[23].OneofWrappers = []interface{}{}
	file_dbp_schema_proto_msgTypes[24].OneofWrappers = []interface{}{}
	file_dbp_schema_proto_msgTypes[25].OneofWrappers = []interface{}{}
	file_dbp_schema_proto_msgTypes[26].OneofWrappers = []interface{}{}
	file_dbp_schema_proto_msgTypes[27].OneofWrappers = []interface{}{}
	file_dbp_schema_proto_msgTypes[28].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_dbp_schema_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   29,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_dbp_schema_proto_goTypes,
		DependencyIndexes: file_dbp_schema_proto_depIdxs,
		EnumInfos:         file_dbp_schema_proto_enumTypes,
		MessageInfos:      file_dbp_schema_proto_msgTypes,
	}.Build()
	File_dbp_schema_proto = out.File
	file_dbp_schema_proto_rawDesc = nil
	file_dbp_schema_proto_goTypes = nil
	file_dbp_schema_proto_depIdxs = nil
}
