syntax = "proto3";

package dbp_schema;

//option go_package="github.com/synerex/proto_json";

import "google/protobuf/timestamp.proto";
import "google/protobuf/struct.proto";

message RealWorldDataset {
    optional string id = 1;                                     // 自身(このJSON-LD)のURL
    optional string name = 2;                                   // (人間が見てわかりやすい)データセットの名前
    optional string url = 3;                                    // (未使用)
    optional RealWorldDataStructureInfo structureInfo = 4;      // 構造情報
    repeated RealWorldDataset generatedFrom = 5;                // このデータセットの基になったデータセット(醸造時の入力データセット)
    optional RealWorldDataBrewerInfo generatedUsing = 6;        // このデータセットを作った醸造プログラム
    repeated RealWorldDataBrewingArgument generatedArgs = 7;    // このデータセットを作った際のパラメータ(醸造時の入力パラメータ)
    optional RealWorldDataCollectionInfo collectionInfo = 8;    // 収集情報
    repeated RealWorldDataStoringInfo distribution = 9;         // データの保存先（データの記録期間に応じて、複数の場所に置く場合もあるため repeated）
    optional string author = 10;                                // データを集めている主体
    optional string contentLocation = 11;                       // データを集めている場所
    optional google.protobuf.Timestamp dateCreated = 12;        // データを集め始めた日時
    optional google.protobuf.Timestamp dateModified = 13;       // 最新のデータを集め始めた日時
    optional google.protobuf.Timestamp datePublished = 14;
    optional string license = 15;
    optional string locationCreated = 16;
    optional string description = 17;
}

message RealWorldDataBrewerInput {
    optional string id = 1;
    optional string name = 2;
    optional string url = 3;
    optional string key = 4;
    optional string inputType = 5;
    optional bytes value = 6;
    optional VariableCharacteristicEnumeration inputCharacteristic = 7;
    optional RealWorldDataset dataset = 8;
}

message RealWorldDataBrewerOutput {
    optional string id = 1;
    optional string name = 2;
    optional string url = 3;
    optional string key = 4;
    optional string outputType = 5;
    optional bytes value = 6;
    optional VariableCharacteristicEnumeration outputCharacteristic = 7;
}

message RealWorldDataBrewingArgument {
    optional string id = 1;
    optional string name = 2;
    optional string url = 3;
    optional string key = 4;
    optional string argumentType = 5;
    optional bytes value = 6;
}

message RealWorldDataBrewerInfo {
    optional string id = 1;
    optional string name = 2;
    optional string url = 3;
    repeated RealWorldDataBrewerInput inputSpecs = 4;
    repeated RealWorldDataBrewerOutput outputSpecs = 5;
    repeated RealWorldDataBrewingArgument argSpecs = 6;
    optional ConversionCharacteristicEnumeration conversionCharacteristic = 7;
}

enum ConversionCharacteristicEnumeration {
    // option allow_alias = true;
    SINGLE_VALUE_REPLACE = 0;
    COL_MERGE = 1;
    ROW_MERGE = 2;
}

enum VariableCharacteristicEnumeration {
    // option allow_alias = true;
    QUALITATIVE = 0;
    QUANTITATIVE = 1;
}

message RealWorldDataCollectionInfo {
    optional string id = 1;
    optional string name = 2;
    optional string url = 3;
    optional string collectionStyle = 4;
    optional string collectionProtocol = 5;
    optional string listenAddress = 6;
    optional string serverAddress = 7;
    optional EntryPoint entryPoint = 8;
}

message EntryPoint {  // https://schema.org/EntryPoint
    optional string actionApplication = 1;
    optional string actionPlatform = 2;
    optional string contentType = 3;
    optional string encodingType = 4;
    optional string httpMethod = 5;
    optional string urlTemplate = 6;
    optional string additionalType = 7;
    optional string alternateName = 8;
    optional string description = 9;
    optional string disambiguatingDescription = 10;
    optional string id = 11;
    optional string image = 12;
    optional string mainEntityOfPage = 13;
    optional string name = 14;
    optional string potentialAction = 15;
    optional string sameAs = 16;
    optional string subjectOf = 17;
    optional string url = 18;
}

message Thing {  // https://schema.org/Thing
    optional string additionalType = 1;
    optional string alternateName = 2;
    optional string description = 3;
    optional string disambiguatingDescription = 4;
    optional string id = 5;
    optional string image = 6;
    optional string mainEntityOfPage = 7;
    optional string name = 8;
    optional string potentialAction = 9;
    optional string sameAs = 10;
    optional string subjectOf = 11;
    optional string url = 12;
}

message RealWorldDataBrewEvent {

}

message RealWorldDataStructureInfo {
    optional string id = 1;
    optional string name = 2;
    optional string url = 3;
    optional string encodingFormat = 4;
    optional google.protobuf.Struct structure = 5;  // JSON-LD schema ( including @graph )
    optional string graphqlSchema = 6;
}

message RealWorldDataStoringInfo {
    optional string id = 1;
    optional string name = 2;
    optional string url = 3;
    optional google.protobuf.Timestamp startTime = 4;
    optional google.protobuf.Timestamp endTime = 5;
    optional string baseUrl = 6;            // ファイルシステムやデータベースの URL
    optional string pattern = 7;            // ファイルシステムなら URL の後に続くパターン、データベースなら日時指定のためのクエリのパターン
    optional int32 transmissionSpeed = 8;   // ストレージの転送速度
    optional string storageType = 9;        // ストレージの種別 SSD、HDD、光学ディスク、磁気テープなどなど
    optional EntryPoint entryPoint = 10;    // HTTP エントリポイント（ schema:EntryPoint を参照 ）
}

message RealWorldDataRegisterDemand {
    optional string id = 1;
    optional string name = 2;
    optional string url = 3;
    optional RealWorldDataset dataset = 4;
}

message RealWorldDataRegisterSupply {
    optional string id = 1;
    optional string name = 2;
    optional string url = 3;
    optional RealWorldDataset dataset = 4;
    optional string status = 5;
}

message RealWorldDataCollectionDemand {
    optional string id = 1;
    optional string name = 2;
    optional string url = 3;
    optional RealWorldDataCollectionInfo collectionInfo = 4;
}

message RealWorldDataCollectionSupply {
    optional string id = 1;
    optional string name = 2;
    optional string url = 3;
    optional RealWorldDataCollectionInfo collectionInfo = 4;
    optional string status = 5;
}

message RealWorldDataCollectionStatus {
    optional string id = 1;
    optional string name = 2;
    optional string url = 3;
    optional RealWorldDataCollectionInfo collectionInfo = 4;
    optional string contentReferenceTime = 5;
    repeated google.protobuf.Struct activeConnections = 6;
    repeated google.protobuf.Struct trafficStatistics = 7;
}

message RealWorldDataBrewingDemand {
    optional string id = 1;
    optional string name = 2;
    optional string url = 3;
    optional RealWorldDataBrewerInfo brewerInfo = 4;
    repeated RealWorldDataBrewerInput brewerInput = 5;
    repeated RealWorldDataBrewingArgument brewingArgument = 6;
    repeated RealWorldDataStoringInfo brewerOutputStore = 7;
    optional string timePeriodStart = 8;                    // 読み込むデータがいつからのデータか
    optional string timePeriodEnd = 9;                      // 読み込むデータがいつまでのデータか
}

message RealWorldDataBrewingSupply {
    optional string id = 1;
    optional string name = 2;
    optional string url = 3;
    optional RealWorldDataBrewerInfo brewerInfo = 4;
    repeated RealWorldDataBrewerOutput brewerOutput = 5;
    repeated RealWorldDataBrewingArgument brewingArgument = 6;
    optional string timePeriodStart = 7;                    // 読み込むデータがいつからのデータか
    optional string timePeriodEnd = 8;                      // 読み込むデータがいつまでのデータか
}

message RealWorldDataPeriodicBrewingConfig {                // RWDB システムが定期的に RealWorldDataBrewingDemand を投げる設定
    optional string id = 1;
    optional string name = 2;
    optional string url = 3;
    optional RealWorldDataBrewingDemand brewingConfig = 4;  // 投げる Demand
    optional string cronConfig = 5;                         // 時間間隔 (cron format)
    optional bool enabled = 6;
}

message RealWorldDataReadDemand {
    optional string id = 1;
    optional string name = 2;
    optional string url = 3;
    optional RealWorldDataset dataset = 4;                  // 読み込む実世界データセット
    optional string timePeriodStart = 5;                    // 読み込むデータがいつからのデータか
    optional string timePeriodEnd = 6;                      // 読み込むデータがいつまでのデータか
    optional string sparqlQuery = 7;                        // 構造クエリ（SPARQL）
    optional string graphqlQuery = 8;                       // 構造クエリ（GraphQL）
}

message RealWorldDataReadSupply {
    optional string id = 1;
    optional string name = 2;
    optional string url = 3;
    optional RealWorldDataset dataset = 4;                  // 読み込む実世界データセット
    optional string timePeriodStart = 5;                    // 読み込むデータがいつからのデータか
    optional string timePeriodEnd = 6;                      // 読み込むデータがいつまでのデータか
    optional string sparqlQuery = 7;                        // 構造クエリ（SPARQL）
    optional string graphqlQuery = 8;                       // 構造クエリ（GraphQL）
    optional bytes data = 9;                                // 実際には MBUS で送る？
}

message RealWorldDataWriteDemand {
    optional string id = 1;
    optional string name = 2;
    optional string url = 3;
    optional RealWorldDataset dataset = 4;                  // 書き込む実世界データセット
    optional string timePeriodStart = 5;                    // 書き込むデータがいつからのデータか
    optional string timePeriodEnd = 6;                      // 書き込むデータがいつまでのデータか
    optional bytes data = 7;                                // 実際には MBUS で送る？
}

message RealWorldDataWriteSupply {
    optional string id = 1;
    optional string name = 2;
    optional string url = 3;
    optional RealWorldDataset dataset = 4;
    optional string timePeriodStart = 5;                    // 書き込んだデータがいつからのデータか
    optional string timePeriodEnd = 6;                      // 書き込んだデータがいつまでのデータか
}

message RealWorldDataMoveDemand {
    optional string id = 1;
    optional string name = 2;
    optional string url = 3;
    optional RealWorldDataset dataset = 4;                  // 移動する RealWorldDataset
    optional string timePeriodStart = 5;                    // 移動する RealWorldDataset のうち対象となるデータの開始時刻はどれだけ前か (ex. 8d → 8日前)
    optional string timePeriodEnd = 6;                      // 移動する RealWorldDataset のうち対象となるデータの終了時刻はどれだけ前か (ex. 7d → 7日前)
    optional RealWorldDataStoringInfo moveFrom = 7;         // データの移動元
    optional RealWorldDataStoringInfo moveTo = 8;           // データの移動先
}

message RealWorldDataMoveSupply {
    optional string id = 1;
    optional string name = 2;
    optional string url = 3;
    optional RealWorldDataset dataset = 4;                  // 移動した RealWorldDataset
    optional string timePeriodStart = 5;                    // 移動した RealWorldDataset のうち対象となるデータの開始時刻はどれだけ前か (ex. 8d → 8日前)
    optional string timePeriodEnd = 6;                      // 移動した RealWorldDataset のうち対象となるデータの終了時刻はどれだけ前か (ex. 7d → 7日前)
    optional RealWorldDataStoringInfo moveFrom = 7;         // データの移動元
    optional RealWorldDataStoringInfo moveTo = 8;           // データの移動先
    optional RealWorldDataset movedDataset = 9;             // 移動先の RealWorldDataset
}

message RealWorldDataPeriodicMoveConfig {                   // RWDB システムが定期的に RealWorldDataset を移動する設定
    optional string id = 1;
    optional string name = 2;
    optional string url = 3;
    optional RealWorldDataMoveDemand moveConfig = 4;        // 移動設定
    optional string cronConfig = 5;                       // 時間間隔 (cron format)
    optional bool enabled = 6;
}

message RealWorldDataRemoveDemand {
    optional string id = 1;
    optional string name = 2;
    optional string url = 3;
    optional RealWorldDataStoringInfo datasetStore = 4;     // 削除する RealWorldDataset の RealWorldDataStoringInfo
    optional string timePeriodStart = 5;                    // 削除する RealWorldDataset のうち対象となるデータの開始時刻はどれだけ前か (ex. 8d → 8日前)
    optional string timePeriodEnd = 6;                      // 削除する RealWorldDataset のうち対象となるデータの終了時刻はどれだけ前か (ex. 7d → 7日前)
}

message RealWorldDataRemoveSupply {
    optional string id = 1;
    optional string name = 2;
    optional string url = 3;
    optional RealWorldDataStoringInfo datasetStore = 4;     // 削除した RealWorldDataset の RealWorldDataStoringInfo
    optional string timePeriodStart = 5;                    // 削除した RealWorldDataset のうち対象となるデータの開始時刻はどれだけ前か (ex. 8d → 8日前)
    optional string timePeriodEnd = 6;                      // 削除した RealWorldDataset のうち対象となるデータの終了時刻はどれだけ前か (ex. 7d → 7日前)
}

message RealWorldDataPeriodicRemoveConfig {                 // RWDB システムが定期的に RealWorldDataset を削除する設定
    optional string id = 1;
    optional string name = 2;
    optional string url = 3;
    optional RealWorldDataRemoveDemand removeConfig = 4;    // 削除設定
    optional string cronConfig = 5;                       // 時間間隔 (cron format)
    optional bool enabled = 6;
}
