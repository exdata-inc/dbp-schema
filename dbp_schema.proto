syntax = "proto3";

package dbp_schema;

//option go_package="github.com/synerex/proto_json";

import "google/protobuf/timestamp.proto";
import "google/protobuf/struct.proto";

message RealWorldDataset {                                      // JSON-LD representing a real-world dataset (subclass of: "schema:Dataset")
    optional string id = 1;                                     // URL of itself (this JSON-LD)
    optional string name = 2;                                   // Name
    optional string url = 3;                                    // URL (unused)
    optional RealWorldDataFieldProfile structureInfo = 4;       // Structural information
    repeated RealWorldDataset generatedFrom = 5;                // Dataset from which this dataset was generated (input dataset during brewing)
    optional RealWorldDataBrewerInfo generatedUsing = 6;        // Brewing program used to create this dataset
    repeated RealWorldDataBrewingArgument generatedArgs = 7;    // Parameters used when creating this dataset (input parameters during brewing)
    optional RealWorldDataCollectionInfo collectionInfo = 8;    // Collection information
    repeated RealWorldDataStoringInfo distribution = 9;         // Data storage locations (repeated because data may be stored in multiple locations depending on retention period)
    optional string author = 10;                                // Entity collecting the data
    optional string contentLocation = 11;                       // Location where the data is collected
    optional google.protobuf.Timestamp dateCreated = 12;        // Timestamp when data collection started
    optional google.protobuf.Timestamp dateModified = 13;       // Timestamp when the most recent data collection began
    optional google.protobuf.Timestamp datePublished = 14;      // Timestamp when the data was published
    optional string license = 15;                               // License
    optional string locationCreated = 16;
    optional string description = 17;                           // Description
    repeated RealWorldDataTags tags = 18;
}

message RealWorldDataBrewerInput {                                      // JSON-LD representing the specification of input data for real-world data brewing
    optional string id = 1;
    optional string name = 2;
    optional string url = 3;
    optional string key = 4;                                            // Key (name) of the brewing input argument
    optional string inputType = 5;                                      // Type of the brewing input data
    optional bytes value = 6;                                           // Value of the brewing input (used when sending Demand)
    optional VariableCharacteristicEnumeration inputCharacteristic = 7; // A characteristic of an input data entry in a real world dataset.
    optional RealWorldDataset dataset = 8;                              // Target dataset
    repeated RealWorldDataTags tags = 9;
}

message RealWorldDataBrewerOutput {                                         // JSON-LD representing the specification of output data for real-world data brewing
    optional string id = 1;
    optional string name = 2;
    optional string url = 3;
    optional string key = 4;
    optional string outputType = 5;                                         // A type of an output data entry in a real world dataset.
    optional bytes value = 6;
    optional VariableCharacteristicEnumeration outputCharacteristic = 7;    // A characteristic of an output data entry in a real world dataset.
    repeated RealWorldDataTags tags = 8;
}

message RealWorldDataBrewingArgument {  // An argument that was passed to a brewer to generate a dataset from another.
    optional string id = 1;
    optional string name = 2;
    optional string url = 3;
    optional string key = 4;
    optional string argumentType = 5;   // A type of an argument passed to a brewer.
    optional bytes value = 6;
    repeated RealWorldDataTags tags = 7;
}

message RealWorldDataBrewerInfo {                                               // JSON-LD representing the specification of the brewer (microprogram) used in real-world data brewing
    optional string id = 1;
    optional string name = 2;
    optional string url = 3;
    repeated RealWorldDataBrewerInput inputSpecs = 4;
    repeated RealWorldDataBrewerOutput outputSpecs = 5;
    repeated RealWorldDataBrewingArgument argSpecs = 6;
    optional ConversionCharacteristicEnumeration conversionCharacteristic = 7;  // A characteristic of a conversion done by the brewer.
    repeated RealWorldDataTags tags = 8;
}

enum ConversionCharacteristicEnumeration {      // Enumerates conversion characteristics, such as single-value-replace, col-merge, or row-merge.
    // option allow_alias = true;
    SINGLE_VALUE_REPLACE = 0;
    COL_MERGE = 1;
    ROW_MERGE = 2;
}

enum VariableCharacteristicEnumeration {        // Enumerates value characteristics, such as qualitative or quantitative.
    // option allow_alias = true;
    QUALITATIVE = 0;
    QUANTITATIVE = 1;
}

message RealWorldDataCollectionInfo {           // Information for collecting real-world data.
    optional string id = 1;
    optional string name = 2;
    optional string url = 3;
    optional string collectionStyle = 4;        // A style of data collection (Server, Client, Pub/Sub).
    optional string collectionProtocol = 5;     // A protocol of data collection (HTTP, HTTPS, FTP, etc.).
    optional string listenAddress = 6;          // A listening address for data collection (URL).
    optional string serverAddress = 7;          // A server address for data collection (URL).
    optional EntryPoint entryPoint = 8;         // An entry point for data collection (action_application, URL).
    repeated RealWorldDataTags tags = 9;
}

message EntryPoint {  // https://schema.org/EntryPoint
    optional string actionApplication = 1;
    optional string actionPlatform = 2;
    optional string contentType = 3;
    optional string encodingType = 4;
    optional string httpMethod = 5;
    optional string urlTemplate = 6;
    optional string additionalType = 7;
    optional string alternateName = 8;
    optional string description = 9;
    optional string disambiguatingDescription = 10;
    optional string id = 11;
    optional string image = 12;
    optional string mainEntityOfPage = 13;
    optional string name = 14;
    optional string potentialAction = 15;
    optional string sameAs = 16;
    optional string subjectOf = 17;
    optional string url = 18;
}

message Thing {  // https://schema.org/Thing
    optional string additionalType = 1;
    optional string alternateName = 2;
    optional string description = 3;
    optional string disambiguatingDescription = 4;
    optional string id = 5;
    optional string image = 6;
    optional string mainEntityOfPage = 7;
    optional string name = 8;
    optional string potentialAction = 9;
    optional string sameAs = 10;
    optional string subjectOf = 11;
    optional string url = 12;
}

message RealWorldDataBrewEvent {

}

message RealWorldDataFieldProfile {        // JSON-LD representing the field profile of a real-world data
    optional string id = 1;
    optional string name = 2;
    optional string url = 3;
    optional string encodingFormat = 4;
    optional RealWorldDataStructureGraph structure = 5;  // JSON-LD schema (including @graph)
    optional string graphqlSchema = 6;
    repeated RealWorldDataTags tags = 7;
}

message RealWorldDataStructureGraph {        // JSON-LD representing the structure of real-world data
    optional string id = 1;
    optional string name = 2;
    optional string url = 3;
    optional google.protobuf.Struct at_graph = 4;  // JSON-LD schema (@graph)
    repeated RealWorldDataTags tags = 5;
}

message RealWorldDataStoringInfo {          // JSON-LD representing the storage information for real-world data
    optional string id = 1;
    optional string name = 2;
    optional string url = 3;
    optional google.protobuf.Timestamp startTime = 4;
    optional google.protobuf.Timestamp endTime = 5;
    optional string baseUrl = 6;            // URL of the file system or database
    optional string pattern = 7;            // If file system, the pattern following the URL; if database, the pattern for specifying date/time in queries
    optional int32 transmissionSpeed = 8;   // Transfer speed of the storage
    optional string storageType = 9;        // Type of storage (e.g., SSD, HDD, optical disc, magnetic tape, etc.)
    optional EntryPoint entryPoint = 10;    // HTTP entry point (see schema:EntryPoint)
    optional string serverAddress = 11;     // Server address
    repeated RealWorldDataPathPatternFormat extendedPathPatternFormats = 12;  // Extended path pattern formats
    repeated RealWorldDataTags tags = 13;
}

message RealWorldDataRegisterDemand {
    optional string id = 1;
    optional string name = 2;
    optional string url = 3;
    optional RealWorldDataset dataset = 4;
    repeated RealWorldDataTags tags = 5;
}

message RealWorldDataRegisterSupply {
    optional string id = 1;
    optional string name = 2;
    optional string url = 3;
    optional RealWorldDataset dataset = 4;
    optional string status = 5;
    repeated RealWorldDataTags tags = 6;
}

message RealWorldDataCollectionDemand {
    optional string id = 1;
    optional string name = 2;
    optional string url = 3;
    optional RealWorldDataCollectionInfo collectionInfo = 4;
    repeated RealWorldDataTags tags = 5;
}

message RealWorldDataCollectionSupply {
    optional string id = 1;
    optional string name = 2;
    optional string url = 3;
    optional RealWorldDataCollectionInfo collectionInfo = 4;
    optional string status = 5;
    repeated RealWorldDataTags tags = 6;
}

message RealWorldDataCollectionStatus {
    optional string id = 1;
    optional string name = 2;
    optional string url = 3;
    optional RealWorldDataCollectionInfo collectionInfo = 4;
    optional string contentReferenceTime = 5;
    repeated google.protobuf.Struct activeConnections = 6;
    repeated google.protobuf.Struct trafficStatistics = 7;
    repeated RealWorldDataTags tags = 8;
}

message RealWorldDataBrewingDemand {
    optional string id = 1;
    optional string name = 2;
    optional string url = 3;
    optional RealWorldDataBrewerInfo brewerInfo = 4;
    repeated RealWorldDataBrewerInput brewerInput = 5;
    repeated RealWorldDataBrewingArgument brewingArgument = 6;
    repeated RealWorldDataStoringInfo brewerOutputStore = 7;
    optional string timePeriodStart = 8;                    // Start time of the data to be read
    optional string timePeriodEnd = 9;                      // End time of the data to be read
    repeated RealWorldDataTags tags = 10;
}

message RealWorldDataBrewingSupply {
    optional string id = 1;
    optional string name = 2;
    optional string url = 3;
    optional RealWorldDataBrewerInfo brewerInfo = 4;
    repeated RealWorldDataBrewerOutput brewerOutput = 5;
    repeated RealWorldDataBrewingArgument brewingArgument = 6;
    optional string timePeriodStart = 7;                    // Start time of the data to be read
    optional string timePeriodEnd = 8;                      // End time of the data to be read
    repeated RealWorldDataTags tags = 9;
}

message RealWorldDataPeriodicBrewingConfig {                // Configuration for the RWDB system to periodically issue RealWorldDataBrewingDemand
    optional string id = 1;
    optional string name = 2;
    optional string url = 3;
    optional RealWorldDataBrewingDemand brewingConfig = 4;  // Demand to be issued
    optional string cronConfig = 5;                         // Time interval (cron format)
    optional bool enabled = 6;
    repeated RealWorldDataTags tags = 7;
}

message RealWorldDataReadDemand {
    optional string id = 1;
    optional string name = 2;
    optional string url = 3;
    optional RealWorldDataset dataset = 4;                  // Real-world dataset to be read
    optional string timePeriodStart = 5;                    // Start time of the data to be read
    optional string timePeriodEnd = 6;                      // End time of the data to be read
    optional string sparqlQuery = 7;                        // Structural query (SPARQL)
    optional string graphqlQuery = 8;                       // Structural query (GraphQL)
    repeated RealWorldDataTags tags = 9;
}

message RealWorldDataReadSupply {
    optional string id = 1;
    optional string name = 2;
    optional string url = 3;
    optional RealWorldDataset dataset = 4;                  // Real-world dataset to be read
    optional string timePeriodStart = 5;                    // Start time of the data to be read
    optional string timePeriodEnd = 6;                      // End time of the data to be read
    optional string sparqlQuery = 7;                        // Structural query (SPARQL)
    optional string graphqlQuery = 8;                       // Structural query (GraphQL)
    optional bytes data = 9;                                // Actually sent via MBUS?
    repeated RealWorldDataTags tags = 10;
}

message RealWorldDataWriteDemand {
    optional string id = 1;
    optional string name = 2;
    optional string url = 3;
    optional RealWorldDataset dataset = 4;                  // Real-world dataset to be written
    optional string timePeriodStart = 5;                    // Start time of the data to be written
    optional string timePeriodEnd = 6;                      // End time of the data to be written
    optional bytes data = 7;                                // Actually sent via MBUS?
    repeated RealWorldDataTags tags = 8;
}

message RealWorldDataWriteSupply {
    optional string id = 1;
    optional string name = 2;
    optional string url = 3;
    optional RealWorldDataset dataset = 4;
    optional string timePeriodStart = 5;                    // Start time of the written data
    optional string timePeriodEnd = 6;                      // End time of the written data
    repeated RealWorldDataTags tags = 7;
}

message RealWorldDataMoveDemand {
    optional string id = 1;
    optional string name = 2;
    optional string url = 3;
    optional RealWorldDataset dataset = 4;                  // RealWorldDataset to be moved
    optional string timePeriodStart = 5;                    // How far back in time the start of the data to be moved should be (e.g., 8d → 8 days ago)
    optional string timePeriodEnd = 6;                      // How far back in time the end of the data to be moved should be (e.g., 7d → 7 days ago)
    optional RealWorldDataStoringInfo moveFrom = 7;         // Source location of the data
    optional RealWorldDataStoringInfo moveTo = 8;           // Destination for the data
    repeated RealWorldDataTags tags = 9;
}

message RealWorldDataMoveSupply {
    optional string id = 1;
    optional string name = 2;
    optional string url = 3;
    optional RealWorldDataset dataset = 4;                  // Moved RealWorldDataset
    optional string timePeriodStart = 5;                    // How far back in time the start of the moved data should be (e.g., 8d → 8 days ago)
    optional string timePeriodEnd = 6;                      // How far back in time the end of the moved data should be (e.g., 7d → 7 days ago)
    optional RealWorldDataStoringInfo moveFrom = 7;         // Source location of the data
    optional RealWorldDataStoringInfo moveTo = 8;           // Destination for the data
    optional RealWorldDataset movedDataset = 9;             // RealWorldDataset at the destination
    repeated RealWorldDataTags tags = 10;
}

message RealWorldDataPeriodicMoveConfig {                   // Configuration for the RWDB system to periodically move RealWorldDataset
    optional string id = 1;
    optional string name = 2;
    optional string url = 3;
    optional RealWorldDataMoveDemand moveConfig = 4;        // Move configuration
    optional string cronConfig = 5;                       // Time interval (cron format)
    optional bool enabled = 6;
    repeated RealWorldDataTags tags = 7;
}

message RealWorldDataRemoveDemand {
    optional string id = 1;
    optional string name = 2;
    optional string url = 3;
    optional RealWorldDataStoringInfo datasetStore = 4;     // RealWorldDataStoringInfo of the RealWorldDataset to be removed
    optional string timePeriodStart = 5;                    // How far back in time the start of the data to be removed should be (e.g., 8d → 8 days ago)
    optional string timePeriodEnd = 6;                      // How far back in time the end of the data to be removed should be (e.g., 7d → 7 days ago)
    repeated RealWorldDataTags tags = 7;
}

message RealWorldDataRemoveSupply {
    optional string id = 1;
    optional string name = 2;
    optional string url = 3;
    optional RealWorldDataStoringInfo datasetStore = 4;     // RealWorldDataStoringInfo of the removed RealWorldDataset
    optional string timePeriodStart = 5;                    // How far back in time the start of the removed data was (e.g., 8d → 8 days ago)
    optional string timePeriodEnd = 6;                      // How far back in time the end of the removed data was (e.g., 7d → 7 days ago)
    repeated RealWorldDataTags tags = 7;
}

message RealWorldDataPeriodicRemoveConfig {                 // Configuration for the RWDB system to periodically remove RealWorldDataset
    optional string id = 1;
    optional string name = 2;
    optional string url = 3;
    optional RealWorldDataRemoveDemand removeConfig = 4;    // Remove configuration
    optional string cronConfig = 5;                       // Time interval (cron format)
    optional bool enabled = 6;
    repeated RealWorldDataTags tags = 7;
}

message RealWorldDataPathPatternFormat {
    optional string id = 1;
    optional string name = 2;
    optional string url = 3;
    optional string pattern = 4;                            // Path pattern before replacement
    optional string datasetProperty = 5;                    // Key name in dbp:tags (within RealWorldDataset) to be replaced
    repeated RealWorldDataTags tags = 6;
}

message RealWorldDataTags {                                 // Represents extended properties for RealWorldData*
    optional string id = 1;
    optional string name = 2;
    optional string url = 3;
    optional string key = 4;                                // Tag key
    optional string value = 5;                              // Tag value
}
